<?php 

//////////////////////////////////////////////////////////////////////////////
/// @file PHP_ErrorCode.inc
/// @title PHP Error constants 정의
/// @brief
///
/// @author justin
/// @date 2013. 11. 6. 오후 6:32:34
///////////////////////////////////////////////////////////////////////////////
/*
class PHP_ERROR
{
	const E_ERROR = 1; // Fatal run-time errors. These indicate errors that can not be recovered from, such as a memory allocation problem. Execution of the script is halted.
	const E_WARNING = 2;  // Run-time warnings (non-fatal errors). Execution of the script is not halted.
	const E_PARSE = 4; // Compile-time parse errors. Parse errors should only be generated by the parser.
	const E_NOTICE = 8; // Run-time notices. Indicate that the script encountered something that could indicate an error, but could also happen in the normal course of running a script.
	const E_CORE_ERROR = 16; // Fatal errors that occur during PHP's initial startup. This is like an E_ERROR, except it is generated by the core of PHP.
	const E_CORE_WARNING = 32; // Warnings (non-fatal errors) that occur during PHP's initial startup. This is like an E_WARNING, except it is generated by the core of PHP.
	const E_COMPILE_ERROR = 64; // Fatal compile-time errors. This is like an E_ERROR, except it is generated by the Zend Scripting Engine.
	const E_COMPILE_WARNING = 128; // Compile-time warnings (non-fatal errors). This is like an E_WARNING, except it is generated by the Zend Scripting Engine.
	const E_USER_ERROR = 256; // User-generated error message. This is like an E_ERROR, except it is generated in PHP code by using the PHP function trigger_error().
	const E_USER_WARNING = 512; // User-generated warning message. This is like an E_WARNING, except it is generated in PHP code by using the PHP function trigger_error().
	const E_USER_NOTICE = 1024; // User-generated notice message. This is like an E_NOTICE, except it is generated in PHP code by using the PHP function trigger_error().
	const E_STRICT = 2048; // Enable to have PHP suggest changes to your code which will ensure the best interoperability and forward compatibility of your code.  Since PHP 5 but not included in E_ALL until PHP 5.4.0
	const E_RECOVERABLE_ERROR = 4096; // Catchable fatal error. It indicates that a probably dangerous error occurred, but did not leave the Engine in an unstable state. If the error is not caught by a user defined handle (see also set_error_handler()), the application aborts as it was an E_ERROR.  Since PHP 5.2.0
	const E_DEPRECATED = 8192; // Run-time notices. Enable this to receive warnings about code that will not work in future versions.  Since PHP 5.3.0
	const E_USER_DEPRECATED = 16384; // User-generated warning message. This is like an E_DEPRECATED, except it is generated in PHP code by using the PHP function trigger_error().  Since PHP 5.3.0
	const E_ALL = 32767; // All errors and warnings, as supported, except of level E_STRICT prior to PHP 5.4.0.  32767 in PHP 5.4.x, 30719 in PHP 5.3.x, 6143 in PHP 5.2.x, 2047 previously
}
*/

?>