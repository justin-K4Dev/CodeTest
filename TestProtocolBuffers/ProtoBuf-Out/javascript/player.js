// source: tutorial.player.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.tutorial.Player');
goog.provide('proto.tutorial.Player.Bag');
goog.provide('proto.tutorial.Player.Box');
goog.provide('proto.tutorial.Player.Item');
goog.provide('proto.tutorial.Player.MobilePhone');
goog.provide('proto.tutorial.Player.MsgCase');
goog.provide('proto.tutorial.Player.MyTrunk');
goog.provide('proto.tutorial.Player.PhoneNumber');
goog.provide('proto.tutorial.Player.PhoneType');
goog.provide('proto.tutorial.Player.Wallet');
goog.provide('proto.tutorial.Player.Watch');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Map');
goog.require('jspb.Message');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tutorial.Player = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tutorial.Player.repeatedFields_, proto.tutorial.Player.oneofGroups_);
};
goog.inherits(proto.tutorial.Player, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tutorial.Player.displayName = 'proto.tutorial.Player';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tutorial.Player.PhoneNumber = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tutorial.Player.PhoneNumber, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tutorial.Player.PhoneNumber.displayName = 'proto.tutorial.Player.PhoneNumber';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tutorial.Player.Item = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tutorial.Player.Item, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tutorial.Player.Item.displayName = 'proto.tutorial.Player.Item';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tutorial.Player.MobilePhone = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tutorial.Player.MobilePhone, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tutorial.Player.MobilePhone.displayName = 'proto.tutorial.Player.MobilePhone';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tutorial.Player.Watch = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tutorial.Player.Watch, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tutorial.Player.Watch.displayName = 'proto.tutorial.Player.Watch';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tutorial.Player.Wallet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tutorial.Player.Wallet.repeatedFields_, null);
};
goog.inherits(proto.tutorial.Player.Wallet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tutorial.Player.Wallet.displayName = 'proto.tutorial.Player.Wallet';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tutorial.Player.Bag = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tutorial.Player.Bag.repeatedFields_, null);
};
goog.inherits(proto.tutorial.Player.Bag, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tutorial.Player.Bag.displayName = 'proto.tutorial.Player.Bag';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tutorial.Player.Box = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tutorial.Player.Box, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tutorial.Player.Box.displayName = 'proto.tutorial.Player.Box';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tutorial.Player.MyTrunk = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tutorial.Player.MyTrunk, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tutorial.Player.MyTrunk.displayName = 'proto.tutorial.Player.MyTrunk';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tutorial.Player.repeatedFields_ = [4,8];

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.tutorial.Player.oneofGroups_ = [[6,7]];

/**
 * @enum {number}
 */
proto.tutorial.Player.MsgCase = {
  MSG_NOT_SET: 0,
  MOBILEPHONE: 6,
  WATCH: 7
};

/**
 * @return {proto.tutorial.Player.MsgCase}
 */
proto.tutorial.Player.prototype.getMsgCase = function() {
  return /** @type {proto.tutorial.Player.MsgCase} */(jspb.Message.computeOneofCase(this, proto.tutorial.Player.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tutorial.Player.prototype.toObject = function(opt_includeInstance) {
  return proto.tutorial.Player.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tutorial.Player} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tutorial.Player.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    email: jspb.Message.getFieldWithDefault(msg, 3, ""),
    phonesList: jspb.Message.toObjectList(msg.getPhonesList(),
    proto.tutorial.Player.PhoneNumber.toObject, includeInstance),
    itemsMap: (f = msg.getItemsMap()) ? f.toObject(includeInstance, proto.tutorial.Player.Item.toObject) : [],
    mobilephone: (f = msg.getMobilephone()) && proto.tutorial.Player.MobilePhone.toObject(includeInstance, f),
    watch: (f = msg.getWatch()) && proto.tutorial.Player.Watch.toObject(includeInstance, f),
    bagsList: jspb.Message.toObjectList(msg.getBagsList(),
    proto.tutorial.Player.Bag.toObject, includeInstance),
    mytrunksMap: (f = msg.getMytrunksMap()) ? f.toObject(includeInstance, proto.tutorial.Player.MyTrunk.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tutorial.Player}
 */
proto.tutorial.Player.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tutorial.Player;
  return proto.tutorial.Player.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tutorial.Player} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tutorial.Player}
 */
proto.tutorial.Player.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmail(value);
      break;
    case 4:
      var value = new proto.tutorial.Player.PhoneNumber;
      reader.readMessage(value,proto.tutorial.Player.PhoneNumber.deserializeBinaryFromReader);
      msg.addPhones(value);
      break;
    case 5:
      var value = msg.getItemsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readUint64, jspb.BinaryReader.prototype.readMessage, proto.tutorial.Player.Item.deserializeBinaryFromReader, 0, new proto.tutorial.Player.Item());
         });
      break;
    case 6:
      var value = new proto.tutorial.Player.MobilePhone;
      reader.readMessage(value,proto.tutorial.Player.MobilePhone.deserializeBinaryFromReader);
      msg.setMobilephone(value);
      break;
    case 7:
      var value = new proto.tutorial.Player.Watch;
      reader.readMessage(value,proto.tutorial.Player.Watch.deserializeBinaryFromReader);
      msg.setWatch(value);
      break;
    case 8:
      var value = new proto.tutorial.Player.Bag;
      reader.readMessage(value,proto.tutorial.Player.Bag.deserializeBinaryFromReader);
      msg.addBags(value);
      break;
    case 9:
      var value = msg.getMytrunksMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readUint64, jspb.BinaryReader.prototype.readMessage, proto.tutorial.Player.MyTrunk.deserializeBinaryFromReader, 0, new proto.tutorial.Player.MyTrunk());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tutorial.Player.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tutorial.Player.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tutorial.Player} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tutorial.Player.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getEmail();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPhonesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.tutorial.Player.PhoneNumber.serializeBinaryToWriter
    );
  }
  f = message.getItemsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(5, writer, jspb.BinaryWriter.prototype.writeUint64, jspb.BinaryWriter.prototype.writeMessage, proto.tutorial.Player.Item.serializeBinaryToWriter);
  }
  f = message.getMobilephone();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.tutorial.Player.MobilePhone.serializeBinaryToWriter
    );
  }
  f = message.getWatch();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.tutorial.Player.Watch.serializeBinaryToWriter
    );
  }
  f = message.getBagsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.tutorial.Player.Bag.serializeBinaryToWriter
    );
  }
  f = message.getMytrunksMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(9, writer, jspb.BinaryWriter.prototype.writeUint64, jspb.BinaryWriter.prototype.writeMessage, proto.tutorial.Player.MyTrunk.serializeBinaryToWriter);
  }
};


/**
 * @enum {number}
 */
proto.tutorial.Player.PhoneType = {
  MOBILE: 0,
  HOME: 1,
  WORK: 2
};




if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tutorial.Player.PhoneNumber.prototype.toObject = function(opt_includeInstance) {
  return proto.tutorial.Player.PhoneNumber.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tutorial.Player.PhoneNumber} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tutorial.Player.PhoneNumber.toObject = function(includeInstance, msg) {
  var f, obj = {
    number: jspb.Message.getFieldWithDefault(msg, 1, ""),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tutorial.Player.PhoneNumber}
 */
proto.tutorial.Player.PhoneNumber.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tutorial.Player.PhoneNumber;
  return proto.tutorial.Player.PhoneNumber.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tutorial.Player.PhoneNumber} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tutorial.Player.PhoneNumber}
 */
proto.tutorial.Player.PhoneNumber.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNumber(value);
      break;
    case 2:
      var value = /** @type {!proto.tutorial.Player.PhoneType} */ (reader.readEnum());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tutorial.Player.PhoneNumber.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tutorial.Player.PhoneNumber.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tutorial.Player.PhoneNumber} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tutorial.Player.PhoneNumber.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNumber();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional string number = 1;
 * @return {string}
 */
proto.tutorial.Player.PhoneNumber.prototype.getNumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.tutorial.Player.PhoneNumber} returns this
 */
proto.tutorial.Player.PhoneNumber.prototype.setNumber = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional PhoneType type = 2;
 * @return {!proto.tutorial.Player.PhoneType}
 */
proto.tutorial.Player.PhoneNumber.prototype.getType = function() {
  return /** @type {!proto.tutorial.Player.PhoneType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.tutorial.Player.PhoneType} value
 * @return {!proto.tutorial.Player.PhoneNumber} returns this
 */
proto.tutorial.Player.PhoneNumber.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tutorial.Player.Item.prototype.toObject = function(opt_includeInstance) {
  return proto.tutorial.Player.Item.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tutorial.Player.Item} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tutorial.Player.Item.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    itemtid: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tutorial.Player.Item}
 */
proto.tutorial.Player.Item.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tutorial.Player.Item;
  return proto.tutorial.Player.Item.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tutorial.Player.Item} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tutorial.Player.Item}
 */
proto.tutorial.Player.Item.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setItemtid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tutorial.Player.Item.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tutorial.Player.Item.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tutorial.Player.Item} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tutorial.Player.Item.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getItemtid();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional uint64 id = 1;
 * @return {number}
 */
proto.tutorial.Player.Item.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.tutorial.Player.Item} returns this
 */
proto.tutorial.Player.Item.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 itemTid = 2;
 * @return {number}
 */
proto.tutorial.Player.Item.prototype.getItemtid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.tutorial.Player.Item} returns this
 */
proto.tutorial.Player.Item.prototype.setItemtid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tutorial.Player.MobilePhone.prototype.toObject = function(opt_includeInstance) {
  return proto.tutorial.Player.MobilePhone.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tutorial.Player.MobilePhone} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tutorial.Player.MobilePhone.toObject = function(includeInstance, msg) {
  var f, obj = {
    device: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tutorial.Player.MobilePhone}
 */
proto.tutorial.Player.MobilePhone.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tutorial.Player.MobilePhone;
  return proto.tutorial.Player.MobilePhone.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tutorial.Player.MobilePhone} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tutorial.Player.MobilePhone}
 */
proto.tutorial.Player.MobilePhone.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDevice(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tutorial.Player.MobilePhone.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tutorial.Player.MobilePhone.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tutorial.Player.MobilePhone} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tutorial.Player.MobilePhone.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDevice();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string device = 1;
 * @return {string}
 */
proto.tutorial.Player.MobilePhone.prototype.getDevice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.tutorial.Player.MobilePhone} returns this
 */
proto.tutorial.Player.MobilePhone.prototype.setDevice = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tutorial.Player.Watch.prototype.toObject = function(opt_includeInstance) {
  return proto.tutorial.Player.Watch.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tutorial.Player.Watch} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tutorial.Player.Watch.toObject = function(includeInstance, msg) {
  var f, obj = {
    device: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tutorial.Player.Watch}
 */
proto.tutorial.Player.Watch.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tutorial.Player.Watch;
  return proto.tutorial.Player.Watch.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tutorial.Player.Watch} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tutorial.Player.Watch}
 */
proto.tutorial.Player.Watch.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDevice(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tutorial.Player.Watch.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tutorial.Player.Watch.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tutorial.Player.Watch} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tutorial.Player.Watch.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDevice();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string device = 1;
 * @return {string}
 */
proto.tutorial.Player.Watch.prototype.getDevice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.tutorial.Player.Watch} returns this
 */
proto.tutorial.Player.Watch.prototype.setDevice = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tutorial.Player.Wallet.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tutorial.Player.Wallet.prototype.toObject = function(opt_includeInstance) {
  return proto.tutorial.Player.Wallet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tutorial.Player.Wallet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tutorial.Player.Wallet.toObject = function(includeInstance, msg) {
  var f, obj = {
    itemsList: jspb.Message.toObjectList(msg.getItemsList(),
    proto.tutorial.Player.Item.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tutorial.Player.Wallet}
 */
proto.tutorial.Player.Wallet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tutorial.Player.Wallet;
  return proto.tutorial.Player.Wallet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tutorial.Player.Wallet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tutorial.Player.Wallet}
 */
proto.tutorial.Player.Wallet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.tutorial.Player.Item;
      reader.readMessage(value,proto.tutorial.Player.Item.deserializeBinaryFromReader);
      msg.addItems(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tutorial.Player.Wallet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tutorial.Player.Wallet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tutorial.Player.Wallet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tutorial.Player.Wallet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getItemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.tutorial.Player.Item.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Item items = 1;
 * @return {!Array<!proto.tutorial.Player.Item>}
 */
proto.tutorial.Player.Wallet.prototype.getItemsList = function() {
  return /** @type{!Array<!proto.tutorial.Player.Item>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tutorial.Player.Item, 1));
};


/**
 * @param {!Array<!proto.tutorial.Player.Item>} value
 * @return {!proto.tutorial.Player.Wallet} returns this
*/
proto.tutorial.Player.Wallet.prototype.setItemsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.tutorial.Player.Item=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tutorial.Player.Item}
 */
proto.tutorial.Player.Wallet.prototype.addItems = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.tutorial.Player.Item, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tutorial.Player.Wallet} returns this
 */
proto.tutorial.Player.Wallet.prototype.clearItemsList = function() {
  return this.setItemsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tutorial.Player.Bag.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tutorial.Player.Bag.prototype.toObject = function(opt_includeInstance) {
  return proto.tutorial.Player.Bag.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tutorial.Player.Bag} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tutorial.Player.Bag.toObject = function(includeInstance, msg) {
  var f, obj = {
    walletsList: jspb.Message.toObjectList(msg.getWalletsList(),
    proto.tutorial.Player.Wallet.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tutorial.Player.Bag}
 */
proto.tutorial.Player.Bag.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tutorial.Player.Bag;
  return proto.tutorial.Player.Bag.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tutorial.Player.Bag} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tutorial.Player.Bag}
 */
proto.tutorial.Player.Bag.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.tutorial.Player.Wallet;
      reader.readMessage(value,proto.tutorial.Player.Wallet.deserializeBinaryFromReader);
      msg.addWallets(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tutorial.Player.Bag.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tutorial.Player.Bag.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tutorial.Player.Bag} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tutorial.Player.Bag.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWalletsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.tutorial.Player.Wallet.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Wallet wallets = 1;
 * @return {!Array<!proto.tutorial.Player.Wallet>}
 */
proto.tutorial.Player.Bag.prototype.getWalletsList = function() {
  return /** @type{!Array<!proto.tutorial.Player.Wallet>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tutorial.Player.Wallet, 1));
};


/**
 * @param {!Array<!proto.tutorial.Player.Wallet>} value
 * @return {!proto.tutorial.Player.Bag} returns this
*/
proto.tutorial.Player.Bag.prototype.setWalletsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.tutorial.Player.Wallet=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tutorial.Player.Wallet}
 */
proto.tutorial.Player.Bag.prototype.addWallets = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.tutorial.Player.Wallet, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tutorial.Player.Bag} returns this
 */
proto.tutorial.Player.Bag.prototype.clearWalletsList = function() {
  return this.setWalletsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tutorial.Player.Box.prototype.toObject = function(opt_includeInstance) {
  return proto.tutorial.Player.Box.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tutorial.Player.Box} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tutorial.Player.Box.toObject = function(includeInstance, msg) {
  var f, obj = {
    itemsMap: (f = msg.getItemsMap()) ? f.toObject(includeInstance, proto.tutorial.Player.Item.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tutorial.Player.Box}
 */
proto.tutorial.Player.Box.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tutorial.Player.Box;
  return proto.tutorial.Player.Box.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tutorial.Player.Box} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tutorial.Player.Box}
 */
proto.tutorial.Player.Box.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getItemsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readUint64, jspb.BinaryReader.prototype.readMessage, proto.tutorial.Player.Item.deserializeBinaryFromReader, 0, new proto.tutorial.Player.Item());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tutorial.Player.Box.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tutorial.Player.Box.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tutorial.Player.Box} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tutorial.Player.Box.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getItemsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeUint64, jspb.BinaryWriter.prototype.writeMessage, proto.tutorial.Player.Item.serializeBinaryToWriter);
  }
};


/**
 * map<uint64, Item> items = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.tutorial.Player.Item>}
 */
proto.tutorial.Player.Box.prototype.getItemsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.tutorial.Player.Item>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.tutorial.Player.Item));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.tutorial.Player.Box} returns this
 */
proto.tutorial.Player.Box.prototype.clearItemsMap = function() {
  this.getItemsMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tutorial.Player.MyTrunk.prototype.toObject = function(opt_includeInstance) {
  return proto.tutorial.Player.MyTrunk.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tutorial.Player.MyTrunk} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tutorial.Player.MyTrunk.toObject = function(includeInstance, msg) {
  var f, obj = {
    boxsMap: (f = msg.getBoxsMap()) ? f.toObject(includeInstance, proto.tutorial.Player.Box.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tutorial.Player.MyTrunk}
 */
proto.tutorial.Player.MyTrunk.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tutorial.Player.MyTrunk;
  return proto.tutorial.Player.MyTrunk.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tutorial.Player.MyTrunk} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tutorial.Player.MyTrunk}
 */
proto.tutorial.Player.MyTrunk.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getBoxsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readUint64, jspb.BinaryReader.prototype.readMessage, proto.tutorial.Player.Box.deserializeBinaryFromReader, 0, new proto.tutorial.Player.Box());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tutorial.Player.MyTrunk.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tutorial.Player.MyTrunk.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tutorial.Player.MyTrunk} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tutorial.Player.MyTrunk.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBoxsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeUint64, jspb.BinaryWriter.prototype.writeMessage, proto.tutorial.Player.Box.serializeBinaryToWriter);
  }
};


/**
 * map<uint64, Box> boxs = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.tutorial.Player.Box>}
 */
proto.tutorial.Player.MyTrunk.prototype.getBoxsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.tutorial.Player.Box>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.tutorial.Player.Box));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.tutorial.Player.MyTrunk} returns this
 */
proto.tutorial.Player.MyTrunk.prototype.clearBoxsMap = function() {
  this.getBoxsMap().clear();
  return this;};


/**
 * optional uint64 id = 1;
 * @return {number}
 */
proto.tutorial.Player.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.tutorial.Player} returns this
 */
proto.tutorial.Player.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.tutorial.Player.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.tutorial.Player} returns this
 */
proto.tutorial.Player.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string email = 3;
 * @return {string}
 */
proto.tutorial.Player.prototype.getEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.tutorial.Player} returns this
 */
proto.tutorial.Player.prototype.setEmail = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated PhoneNumber phones = 4;
 * @return {!Array<!proto.tutorial.Player.PhoneNumber>}
 */
proto.tutorial.Player.prototype.getPhonesList = function() {
  return /** @type{!Array<!proto.tutorial.Player.PhoneNumber>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tutorial.Player.PhoneNumber, 4));
};


/**
 * @param {!Array<!proto.tutorial.Player.PhoneNumber>} value
 * @return {!proto.tutorial.Player} returns this
*/
proto.tutorial.Player.prototype.setPhonesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.tutorial.Player.PhoneNumber=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tutorial.Player.PhoneNumber}
 */
proto.tutorial.Player.prototype.addPhones = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.tutorial.Player.PhoneNumber, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tutorial.Player} returns this
 */
proto.tutorial.Player.prototype.clearPhonesList = function() {
  return this.setPhonesList([]);
};


/**
 * map<uint64, Item> items = 5;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.tutorial.Player.Item>}
 */
proto.tutorial.Player.prototype.getItemsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.tutorial.Player.Item>} */ (
      jspb.Message.getMapField(this, 5, opt_noLazyCreate,
      proto.tutorial.Player.Item));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.tutorial.Player} returns this
 */
proto.tutorial.Player.prototype.clearItemsMap = function() {
  this.getItemsMap().clear();
  return this;};


/**
 * optional MobilePhone mobilePhone = 6;
 * @return {?proto.tutorial.Player.MobilePhone}
 */
proto.tutorial.Player.prototype.getMobilephone = function() {
  return /** @type{?proto.tutorial.Player.MobilePhone} */ (
    jspb.Message.getWrapperField(this, proto.tutorial.Player.MobilePhone, 6));
};


/**
 * @param {?proto.tutorial.Player.MobilePhone|undefined} value
 * @return {!proto.tutorial.Player} returns this
*/
proto.tutorial.Player.prototype.setMobilephone = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.tutorial.Player.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tutorial.Player} returns this
 */
proto.tutorial.Player.prototype.clearMobilephone = function() {
  return this.setMobilephone(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tutorial.Player.prototype.hasMobilephone = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional Watch watch = 7;
 * @return {?proto.tutorial.Player.Watch}
 */
proto.tutorial.Player.prototype.getWatch = function() {
  return /** @type{?proto.tutorial.Player.Watch} */ (
    jspb.Message.getWrapperField(this, proto.tutorial.Player.Watch, 7));
};


/**
 * @param {?proto.tutorial.Player.Watch|undefined} value
 * @return {!proto.tutorial.Player} returns this
*/
proto.tutorial.Player.prototype.setWatch = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.tutorial.Player.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tutorial.Player} returns this
 */
proto.tutorial.Player.prototype.clearWatch = function() {
  return this.setWatch(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tutorial.Player.prototype.hasWatch = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * repeated Bag bags = 8;
 * @return {!Array<!proto.tutorial.Player.Bag>}
 */
proto.tutorial.Player.prototype.getBagsList = function() {
  return /** @type{!Array<!proto.tutorial.Player.Bag>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tutorial.Player.Bag, 8));
};


/**
 * @param {!Array<!proto.tutorial.Player.Bag>} value
 * @return {!proto.tutorial.Player} returns this
*/
proto.tutorial.Player.prototype.setBagsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.tutorial.Player.Bag=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tutorial.Player.Bag}
 */
proto.tutorial.Player.prototype.addBags = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.tutorial.Player.Bag, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tutorial.Player} returns this
 */
proto.tutorial.Player.prototype.clearBagsList = function() {
  return this.setBagsList([]);
};


/**
 * map<uint64, MyTrunk> myTrunks = 9;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.tutorial.Player.MyTrunk>}
 */
proto.tutorial.Player.prototype.getMytrunksMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.tutorial.Player.MyTrunk>} */ (
      jspb.Message.getMapField(this, 9, opt_noLazyCreate,
      proto.tutorial.Player.MyTrunk));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.tutorial.Player} returns this
 */
proto.tutorial.Player.prototype.clearMytrunksMap = function() {
  this.getMytrunksMap().clear();
  return this;};


