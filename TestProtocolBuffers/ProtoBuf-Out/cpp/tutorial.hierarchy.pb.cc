// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tutorial.hierarchy.proto

#include "tutorial.hierarchy.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr MyHomeObjectSlotInfo::MyHomeObjectSlotInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : slotnum_(0)
  , objectid_(0){}
struct MyHomeObjectSlotInfoDefaultTypeInternal {
  constexpr MyHomeObjectSlotInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MyHomeObjectSlotInfoDefaultTypeInternal() {}
  union {
    MyHomeObjectSlotInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MyHomeObjectSlotInfoDefaultTypeInternal _MyHomeObjectSlotInfo_default_instance_;
constexpr ClientToLoginReq_LoginReq::ClientToLoginReq_LoginReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , password_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , securtytoken_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ClientToLoginReq_LoginReqDefaultTypeInternal {
  constexpr ClientToLoginReq_LoginReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ClientToLoginReq_LoginReqDefaultTypeInternal() {}
  union {
    ClientToLoginReq_LoginReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ClientToLoginReq_LoginReqDefaultTypeInternal _ClientToLoginReq_LoginReq_default_instance_;
constexpr ClientToLoginReq_LogoutReq::ClientToLoginReq_LogoutReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ClientToLoginReq_LogoutReqDefaultTypeInternal {
  constexpr ClientToLoginReq_LogoutReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ClientToLoginReq_LogoutReqDefaultTypeInternal() {}
  union {
    ClientToLoginReq_LogoutReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ClientToLoginReq_LogoutReqDefaultTypeInternal _ClientToLoginReq_LogoutReq_default_instance_;
constexpr ClientToLoginReq::ClientToLoginReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct ClientToLoginReqDefaultTypeInternal {
  constexpr ClientToLoginReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ClientToLoginReqDefaultTypeInternal() {}
  union {
    ClientToLoginReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ClientToLoginReqDefaultTypeInternal _ClientToLoginReq_default_instance_;
constexpr ClientToLoginRes_LoginRes::ClientToLoginRes_LoginRes(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : gameserveraddr_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , otp_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , gameserverport_(0){}
struct ClientToLoginRes_LoginResDefaultTypeInternal {
  constexpr ClientToLoginRes_LoginResDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ClientToLoginRes_LoginResDefaultTypeInternal() {}
  union {
    ClientToLoginRes_LoginRes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ClientToLoginRes_LoginResDefaultTypeInternal _ClientToLoginRes_LoginRes_default_instance_;
constexpr ClientToLoginRes_LogoutRes::ClientToLoginRes_LogoutRes(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ClientToLoginRes_LogoutResDefaultTypeInternal {
  constexpr ClientToLoginRes_LogoutResDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ClientToLoginRes_LogoutResDefaultTypeInternal() {}
  union {
    ClientToLoginRes_LogoutRes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ClientToLoginRes_LogoutResDefaultTypeInternal _ClientToLoginRes_LogoutRes_default_instance_;
constexpr ClientToLoginRes::ClientToLoginRes(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : errorcode_(0)

  , _oneof_case_{}{}
struct ClientToLoginResDefaultTypeInternal {
  constexpr ClientToLoginResDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ClientToLoginResDefaultTypeInternal() {}
  union {
    ClientToLoginRes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ClientToLoginResDefaultTypeInternal _ClientToLoginRes_default_instance_;
constexpr ClientToLoginMessage_MyHome::ClientToLoginMessage_MyHome(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : slotinfo_()
  , id_(0){}
struct ClientToLoginMessage_MyHomeDefaultTypeInternal {
  constexpr ClientToLoginMessage_MyHomeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ClientToLoginMessage_MyHomeDefaultTypeInternal() {}
  union {
    ClientToLoginMessage_MyHome _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ClientToLoginMessage_MyHomeDefaultTypeInternal _ClientToLoginMessage_MyHome_default_instance_;
constexpr ClientToLoginMessage::ClientToLoginMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct ClientToLoginMessageDefaultTypeInternal {
  constexpr ClientToLoginMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ClientToLoginMessageDefaultTypeInternal() {}
  union {
    ClientToLoginMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ClientToLoginMessageDefaultTypeInternal _ClientToLoginMessage_default_instance_;
constexpr ClientToLogin::ClientToLogin(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct ClientToLoginDefaultTypeInternal {
  constexpr ClientToLoginDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ClientToLoginDefaultTypeInternal() {}
  union {
    ClientToLogin _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ClientToLoginDefaultTypeInternal _ClientToLogin_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_tutorial_2ehierarchy_2eproto[10];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_tutorial_2ehierarchy_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_tutorial_2ehierarchy_2eproto = nullptr;

const uint32_t TableStruct_tutorial_2ehierarchy_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MyHomeObjectSlotInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::MyHomeObjectSlotInfo, slotnum_),
  PROTOBUF_FIELD_OFFSET(::MyHomeObjectSlotInfo, objectid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ClientToLoginReq_LoginReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ClientToLoginReq_LoginReq, id_),
  PROTOBUF_FIELD_OFFSET(::ClientToLoginReq_LoginReq, password_),
  PROTOBUF_FIELD_OFFSET(::ClientToLoginReq_LoginReq, securtytoken_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ClientToLoginReq_LogoutReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ClientToLoginReq, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::ClientToLoginReq, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::ClientToLoginReq, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ClientToLoginRes_LoginRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ClientToLoginRes_LoginRes, gameserveraddr_),
  PROTOBUF_FIELD_OFFSET(::ClientToLoginRes_LoginRes, gameserverport_),
  PROTOBUF_FIELD_OFFSET(::ClientToLoginRes_LoginRes, otp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ClientToLoginRes_LogoutRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ClientToLoginRes, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::ClientToLoginRes, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ClientToLoginRes, errorcode_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::ClientToLoginRes, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ClientToLoginMessage_MyHome, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ClientToLoginMessage_MyHome, id_),
  PROTOBUF_FIELD_OFFSET(::ClientToLoginMessage_MyHome, slotinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ClientToLoginMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::ClientToLoginMessage, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::ClientToLoginMessage, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ClientToLogin, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::ClientToLogin, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::ClientToLogin, msg_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::MyHomeObjectSlotInfo)},
  { 8, -1, -1, sizeof(::ClientToLoginReq_LoginReq)},
  { 17, -1, -1, sizeof(::ClientToLoginReq_LogoutReq)},
  { 23, -1, -1, sizeof(::ClientToLoginReq)},
  { 32, -1, -1, sizeof(::ClientToLoginRes_LoginRes)},
  { 41, -1, -1, sizeof(::ClientToLoginRes_LogoutRes)},
  { 47, -1, -1, sizeof(::ClientToLoginRes)},
  { 57, -1, -1, sizeof(::ClientToLoginMessage_MyHome)},
  { 65, -1, -1, sizeof(::ClientToLoginMessage)},
  { 73, -1, -1, sizeof(::ClientToLogin)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MyHomeObjectSlotInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ClientToLoginReq_LoginReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ClientToLoginReq_LogoutReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ClientToLoginReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ClientToLoginRes_LoginRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ClientToLoginRes_LogoutRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ClientToLoginRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ClientToLoginMessage_MyHome_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ClientToLoginMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ClientToLogin_default_instance_),
};

const char descriptor_table_protodef_tutorial_2ehierarchy_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\030tutorial.hierarchy.proto\"9\n\024MyHomeObje"
  "ctSlotInfo\022\017\n\007slotNum\030\001 \001(\005\022\020\n\010objectId\030"
  "\002 \001(\005\"\310\001\n\020ClientToLoginReq\022.\n\010loginReq\030\001"
  " \001(\0132\032.ClientToLoginReq.LoginReqH\000\0220\n\tlo"
  "goutReq\030\002 \001(\0132\033.ClientToLoginReq.LogoutR"
  "eqH\000\032>\n\010LoginReq\022\n\n\002id\030\001 \001(\t\022\020\n\010password"
  "\030\002 \001(\t\022\024\n\014securtyToken\030\003 \001(\t\032\013\n\tLogoutRe"
  "qB\005\n\003msg\"\265\003\n\020ClientToLoginRes\0229\n\terrorCo"
  "de\030\001 \001(\0162&.ClientToLoginRes.LoginServerE"
  "rrorCode\022.\n\010loginRes\030\002 \001(\0132\032.ClientToLog"
  "inRes.LoginResH\000\0220\n\tlogoutRes\030\003 \001(\0132\033.Cl"
  "ientToLoginRes.LogoutResH\000\032G\n\010LoginRes\022\026"
  "\n\016gameServerAddr\030\001 \001(\t\022\026\n\016gameServerPort"
  "\030\002 \001(\005\022\013\n\003otp\030\003 \001(\t\032\013\n\tLogoutRes\"\246\001\n\024Log"
  "inServerErrorCode\022\013\n\007Success\020\000\022\014\n\010DupLog"
  "in\020\001\022\n\n\006Moving\020\002\022\013\n\007DbError\020\003\022\014\n\010KickFai"
  "l\020\004\022\026\n\022NotCorrectPassword\020\005\022\020\n\014NotFoundU"
  "ser\020\006\022\020\n\014NoGameServer\020\007\022\020\n\014LoginPending\020"
  "\010B\005\n\003msg\"\214\001\n\024ClientToLoginMessage\022.\n\006myH"
  "ome\030\001 \001(\0132\034.ClientToLoginMessage.MyHomeH"
  "\000\032=\n\006MyHome\022\n\n\002id\030\001 \001(\005\022\'\n\010slotInfo\030\002 \003("
  "\0132\025.MyHomeObjectSlotInfoB\005\n\003msg\"\215\001\n\rClie"
  "ntToLogin\022$\n\007request\030\001 \001(\0132\021.ClientToLog"
  "inReqH\000\022%\n\010response\030\002 \001(\0132\021.ClientToLogi"
  "nResH\000\022(\n\007message\030\003 \001(\0132\025.ClientToLoginM"
  "essageH\000B\005\n\003msgb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_tutorial_2ehierarchy_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tutorial_2ehierarchy_2eproto = {
  false, false, 1023, descriptor_table_protodef_tutorial_2ehierarchy_2eproto, "tutorial.hierarchy.proto", 
  &descriptor_table_tutorial_2ehierarchy_2eproto_once, nullptr, 0, 10,
  schemas, file_default_instances, TableStruct_tutorial_2ehierarchy_2eproto::offsets,
  file_level_metadata_tutorial_2ehierarchy_2eproto, file_level_enum_descriptors_tutorial_2ehierarchy_2eproto, file_level_service_descriptors_tutorial_2ehierarchy_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_tutorial_2ehierarchy_2eproto_getter() {
  return &descriptor_table_tutorial_2ehierarchy_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_tutorial_2ehierarchy_2eproto(&descriptor_table_tutorial_2ehierarchy_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClientToLoginRes_LoginServerErrorCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tutorial_2ehierarchy_2eproto);
  return file_level_enum_descriptors_tutorial_2ehierarchy_2eproto[0];
}
bool ClientToLoginRes_LoginServerErrorCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ClientToLoginRes_LoginServerErrorCode ClientToLoginRes::Success;
constexpr ClientToLoginRes_LoginServerErrorCode ClientToLoginRes::DupLogin;
constexpr ClientToLoginRes_LoginServerErrorCode ClientToLoginRes::Moving;
constexpr ClientToLoginRes_LoginServerErrorCode ClientToLoginRes::DbError;
constexpr ClientToLoginRes_LoginServerErrorCode ClientToLoginRes::KickFail;
constexpr ClientToLoginRes_LoginServerErrorCode ClientToLoginRes::NotCorrectPassword;
constexpr ClientToLoginRes_LoginServerErrorCode ClientToLoginRes::NotFoundUser;
constexpr ClientToLoginRes_LoginServerErrorCode ClientToLoginRes::NoGameServer;
constexpr ClientToLoginRes_LoginServerErrorCode ClientToLoginRes::LoginPending;
constexpr ClientToLoginRes_LoginServerErrorCode ClientToLoginRes::LoginServerErrorCode_MIN;
constexpr ClientToLoginRes_LoginServerErrorCode ClientToLoginRes::LoginServerErrorCode_MAX;
constexpr int ClientToLoginRes::LoginServerErrorCode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class MyHomeObjectSlotInfo::_Internal {
 public:
};

MyHomeObjectSlotInfo::MyHomeObjectSlotInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:MyHomeObjectSlotInfo)
}
MyHomeObjectSlotInfo::MyHomeObjectSlotInfo(const MyHomeObjectSlotInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&slotnum_, &from.slotnum_,
    static_cast<size_t>(reinterpret_cast<char*>(&objectid_) -
    reinterpret_cast<char*>(&slotnum_)) + sizeof(objectid_));
  // @@protoc_insertion_point(copy_constructor:MyHomeObjectSlotInfo)
}

inline void MyHomeObjectSlotInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&slotnum_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&objectid_) -
    reinterpret_cast<char*>(&slotnum_)) + sizeof(objectid_));
}

MyHomeObjectSlotInfo::~MyHomeObjectSlotInfo() {
  // @@protoc_insertion_point(destructor:MyHomeObjectSlotInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MyHomeObjectSlotInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MyHomeObjectSlotInfo::ArenaDtor(void* object) {
  MyHomeObjectSlotInfo* _this = reinterpret_cast< MyHomeObjectSlotInfo* >(object);
  (void)_this;
}
void MyHomeObjectSlotInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MyHomeObjectSlotInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MyHomeObjectSlotInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:MyHomeObjectSlotInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&slotnum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&objectid_) -
      reinterpret_cast<char*>(&slotnum_)) + sizeof(objectid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MyHomeObjectSlotInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 slotNum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          slotnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 objectId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          objectid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MyHomeObjectSlotInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MyHomeObjectSlotInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 slotNum = 1;
  if (this->_internal_slotnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_slotnum(), target);
  }

  // int32 objectId = 2;
  if (this->_internal_objectid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_objectid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MyHomeObjectSlotInfo)
  return target;
}

size_t MyHomeObjectSlotInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MyHomeObjectSlotInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 slotNum = 1;
  if (this->_internal_slotnum() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_slotnum());
  }

  // int32 objectId = 2;
  if (this->_internal_objectid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_objectid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MyHomeObjectSlotInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MyHomeObjectSlotInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MyHomeObjectSlotInfo::GetClassData() const { return &_class_data_; }

void MyHomeObjectSlotInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MyHomeObjectSlotInfo *>(to)->MergeFrom(
      static_cast<const MyHomeObjectSlotInfo &>(from));
}


void MyHomeObjectSlotInfo::MergeFrom(const MyHomeObjectSlotInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MyHomeObjectSlotInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_slotnum() != 0) {
    _internal_set_slotnum(from._internal_slotnum());
  }
  if (from._internal_objectid() != 0) {
    _internal_set_objectid(from._internal_objectid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MyHomeObjectSlotInfo::CopyFrom(const MyHomeObjectSlotInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MyHomeObjectSlotInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MyHomeObjectSlotInfo::IsInitialized() const {
  return true;
}

void MyHomeObjectSlotInfo::InternalSwap(MyHomeObjectSlotInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MyHomeObjectSlotInfo, objectid_)
      + sizeof(MyHomeObjectSlotInfo::objectid_)
      - PROTOBUF_FIELD_OFFSET(MyHomeObjectSlotInfo, slotnum_)>(
          reinterpret_cast<char*>(&slotnum_),
          reinterpret_cast<char*>(&other->slotnum_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MyHomeObjectSlotInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tutorial_2ehierarchy_2eproto_getter, &descriptor_table_tutorial_2ehierarchy_2eproto_once,
      file_level_metadata_tutorial_2ehierarchy_2eproto[0]);
}

// ===================================================================

class ClientToLoginReq_LoginReq::_Internal {
 public:
};

ClientToLoginReq_LoginReq::ClientToLoginReq_LoginReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ClientToLoginReq.LoginReq)
}
ClientToLoginReq_LoginReq::ClientToLoginReq_LoginReq(const ClientToLoginReq_LoginReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_password().empty()) {
    password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_password(), 
      GetArenaForAllocation());
  }
  securtytoken_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    securtytoken_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_securtytoken().empty()) {
    securtytoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_securtytoken(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ClientToLoginReq.LoginReq)
}

inline void ClientToLoginReq_LoginReq::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
securtytoken_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  securtytoken_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ClientToLoginReq_LoginReq::~ClientToLoginReq_LoginReq() {
  // @@protoc_insertion_point(destructor:ClientToLoginReq.LoginReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ClientToLoginReq_LoginReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  securtytoken_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ClientToLoginReq_LoginReq::ArenaDtor(void* object) {
  ClientToLoginReq_LoginReq* _this = reinterpret_cast< ClientToLoginReq_LoginReq* >(object);
  (void)_this;
}
void ClientToLoginReq_LoginReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClientToLoginReq_LoginReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClientToLoginReq_LoginReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ClientToLoginReq.LoginReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  password_.ClearToEmpty();
  securtytoken_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientToLoginReq_LoginReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ClientToLoginReq.LoginReq.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string password = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ClientToLoginReq.LoginReq.password"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string securtyToken = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_securtytoken();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ClientToLoginReq.LoginReq.securtyToken"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientToLoginReq_LoginReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ClientToLoginReq.LoginReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ClientToLoginReq.LoginReq.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string password = 2;
  if (!this->_internal_password().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ClientToLoginReq.LoginReq.password");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_password(), target);
  }

  // string securtyToken = 3;
  if (!this->_internal_securtytoken().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_securtytoken().data(), static_cast<int>(this->_internal_securtytoken().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ClientToLoginReq.LoginReq.securtyToken");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_securtytoken(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ClientToLoginReq.LoginReq)
  return target;
}

size_t ClientToLoginReq_LoginReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ClientToLoginReq.LoginReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string password = 2;
  if (!this->_internal_password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  // string securtyToken = 3;
  if (!this->_internal_securtytoken().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_securtytoken());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClientToLoginReq_LoginReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ClientToLoginReq_LoginReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClientToLoginReq_LoginReq::GetClassData() const { return &_class_data_; }

void ClientToLoginReq_LoginReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ClientToLoginReq_LoginReq *>(to)->MergeFrom(
      static_cast<const ClientToLoginReq_LoginReq &>(from));
}


void ClientToLoginReq_LoginReq::MergeFrom(const ClientToLoginReq_LoginReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ClientToLoginReq.LoginReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_password().empty()) {
    _internal_set_password(from._internal_password());
  }
  if (!from._internal_securtytoken().empty()) {
    _internal_set_securtytoken(from._internal_securtytoken());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClientToLoginReq_LoginReq::CopyFrom(const ClientToLoginReq_LoginReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ClientToLoginReq.LoginReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientToLoginReq_LoginReq::IsInitialized() const {
  return true;
}

void ClientToLoginReq_LoginReq::InternalSwap(ClientToLoginReq_LoginReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &password_, lhs_arena,
      &other->password_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &securtytoken_, lhs_arena,
      &other->securtytoken_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientToLoginReq_LoginReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tutorial_2ehierarchy_2eproto_getter, &descriptor_table_tutorial_2ehierarchy_2eproto_once,
      file_level_metadata_tutorial_2ehierarchy_2eproto[1]);
}

// ===================================================================

class ClientToLoginReq_LogoutReq::_Internal {
 public:
};

ClientToLoginReq_LogoutReq::ClientToLoginReq_LogoutReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:ClientToLoginReq.LogoutReq)
}
ClientToLoginReq_LogoutReq::ClientToLoginReq_LogoutReq(const ClientToLoginReq_LogoutReq& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ClientToLoginReq.LogoutReq)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClientToLoginReq_LogoutReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClientToLoginReq_LogoutReq::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ClientToLoginReq_LogoutReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tutorial_2ehierarchy_2eproto_getter, &descriptor_table_tutorial_2ehierarchy_2eproto_once,
      file_level_metadata_tutorial_2ehierarchy_2eproto[2]);
}

// ===================================================================

class ClientToLoginReq::_Internal {
 public:
  static const ::ClientToLoginReq_LoginReq& loginreq(const ClientToLoginReq* msg);
  static const ::ClientToLoginReq_LogoutReq& logoutreq(const ClientToLoginReq* msg);
};

const ::ClientToLoginReq_LoginReq&
ClientToLoginReq::_Internal::loginreq(const ClientToLoginReq* msg) {
  return *msg->msg_.loginreq_;
}
const ::ClientToLoginReq_LogoutReq&
ClientToLoginReq::_Internal::logoutreq(const ClientToLoginReq* msg) {
  return *msg->msg_.logoutreq_;
}
void ClientToLoginReq::set_allocated_loginreq(::ClientToLoginReq_LoginReq* loginreq) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_msg();
  if (loginreq) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ClientToLoginReq_LoginReq>::GetOwningArena(loginreq);
    if (message_arena != submessage_arena) {
      loginreq = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, loginreq, submessage_arena);
    }
    set_has_loginreq();
    msg_.loginreq_ = loginreq;
  }
  // @@protoc_insertion_point(field_set_allocated:ClientToLoginReq.loginReq)
}
void ClientToLoginReq::set_allocated_logoutreq(::ClientToLoginReq_LogoutReq* logoutreq) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_msg();
  if (logoutreq) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ClientToLoginReq_LogoutReq>::GetOwningArena(logoutreq);
    if (message_arena != submessage_arena) {
      logoutreq = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, logoutreq, submessage_arena);
    }
    set_has_logoutreq();
    msg_.logoutreq_ = logoutreq;
  }
  // @@protoc_insertion_point(field_set_allocated:ClientToLoginReq.logoutReq)
}
ClientToLoginReq::ClientToLoginReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ClientToLoginReq)
}
ClientToLoginReq::ClientToLoginReq(const ClientToLoginReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_msg();
  switch (from.msg_case()) {
    case kLoginReq: {
      _internal_mutable_loginreq()->::ClientToLoginReq_LoginReq::MergeFrom(from._internal_loginreq());
      break;
    }
    case kLogoutReq: {
      _internal_mutable_logoutreq()->::ClientToLoginReq_LogoutReq::MergeFrom(from._internal_logoutreq());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ClientToLoginReq)
}

inline void ClientToLoginReq::SharedCtor() {
clear_has_msg();
}

ClientToLoginReq::~ClientToLoginReq() {
  // @@protoc_insertion_point(destructor:ClientToLoginReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ClientToLoginReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_msg()) {
    clear_msg();
  }
}

void ClientToLoginReq::ArenaDtor(void* object) {
  ClientToLoginReq* _this = reinterpret_cast< ClientToLoginReq* >(object);
  (void)_this;
}
void ClientToLoginReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClientToLoginReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClientToLoginReq::clear_msg() {
// @@protoc_insertion_point(one_of_clear_start:ClientToLoginReq)
  switch (msg_case()) {
    case kLoginReq: {
      if (GetArenaForAllocation() == nullptr) {
        delete msg_.loginreq_;
      }
      break;
    }
    case kLogoutReq: {
      if (GetArenaForAllocation() == nullptr) {
        delete msg_.logoutreq_;
      }
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MSG_NOT_SET;
}


void ClientToLoginReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ClientToLoginReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_msg();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientToLoginReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ClientToLoginReq.LoginReq loginReq = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_loginreq(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ClientToLoginReq.LogoutReq logoutReq = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_logoutreq(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientToLoginReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ClientToLoginReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ClientToLoginReq.LoginReq loginReq = 1;
  if (_internal_has_loginreq()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::loginreq(this), target, stream);
  }

  // .ClientToLoginReq.LogoutReq logoutReq = 2;
  if (_internal_has_logoutreq()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::logoutreq(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ClientToLoginReq)
  return target;
}

size_t ClientToLoginReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ClientToLoginReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (msg_case()) {
    // .ClientToLoginReq.LoginReq loginReq = 1;
    case kLoginReq: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.loginreq_);
      break;
    }
    // .ClientToLoginReq.LogoutReq logoutReq = 2;
    case kLogoutReq: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.logoutreq_);
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClientToLoginReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ClientToLoginReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClientToLoginReq::GetClassData() const { return &_class_data_; }

void ClientToLoginReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ClientToLoginReq *>(to)->MergeFrom(
      static_cast<const ClientToLoginReq &>(from));
}


void ClientToLoginReq::MergeFrom(const ClientToLoginReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ClientToLoginReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.msg_case()) {
    case kLoginReq: {
      _internal_mutable_loginreq()->::ClientToLoginReq_LoginReq::MergeFrom(from._internal_loginreq());
      break;
    }
    case kLogoutReq: {
      _internal_mutable_logoutreq()->::ClientToLoginReq_LogoutReq::MergeFrom(from._internal_logoutreq());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClientToLoginReq::CopyFrom(const ClientToLoginReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ClientToLoginReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientToLoginReq::IsInitialized() const {
  return true;
}

void ClientToLoginReq::InternalSwap(ClientToLoginReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(msg_, other->msg_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientToLoginReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tutorial_2ehierarchy_2eproto_getter, &descriptor_table_tutorial_2ehierarchy_2eproto_once,
      file_level_metadata_tutorial_2ehierarchy_2eproto[3]);
}

// ===================================================================

class ClientToLoginRes_LoginRes::_Internal {
 public:
};

ClientToLoginRes_LoginRes::ClientToLoginRes_LoginRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ClientToLoginRes.LoginRes)
}
ClientToLoginRes_LoginRes::ClientToLoginRes_LoginRes(const ClientToLoginRes_LoginRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  gameserveraddr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    gameserveraddr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_gameserveraddr().empty()) {
    gameserveraddr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_gameserveraddr(), 
      GetArenaForAllocation());
  }
  otp_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    otp_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_otp().empty()) {
    otp_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_otp(), 
      GetArenaForAllocation());
  }
  gameserverport_ = from.gameserverport_;
  // @@protoc_insertion_point(copy_constructor:ClientToLoginRes.LoginRes)
}

inline void ClientToLoginRes_LoginRes::SharedCtor() {
gameserveraddr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  gameserveraddr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
otp_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  otp_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
gameserverport_ = 0;
}

ClientToLoginRes_LoginRes::~ClientToLoginRes_LoginRes() {
  // @@protoc_insertion_point(destructor:ClientToLoginRes.LoginRes)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ClientToLoginRes_LoginRes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  gameserveraddr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  otp_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ClientToLoginRes_LoginRes::ArenaDtor(void* object) {
  ClientToLoginRes_LoginRes* _this = reinterpret_cast< ClientToLoginRes_LoginRes* >(object);
  (void)_this;
}
void ClientToLoginRes_LoginRes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClientToLoginRes_LoginRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClientToLoginRes_LoginRes::Clear() {
// @@protoc_insertion_point(message_clear_start:ClientToLoginRes.LoginRes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gameserveraddr_.ClearToEmpty();
  otp_.ClearToEmpty();
  gameserverport_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientToLoginRes_LoginRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string gameServerAddr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_gameserveraddr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ClientToLoginRes.LoginRes.gameServerAddr"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 gameServerPort = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          gameserverport_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string otp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_otp();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ClientToLoginRes.LoginRes.otp"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientToLoginRes_LoginRes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ClientToLoginRes.LoginRes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string gameServerAddr = 1;
  if (!this->_internal_gameserveraddr().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gameserveraddr().data(), static_cast<int>(this->_internal_gameserveraddr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ClientToLoginRes.LoginRes.gameServerAddr");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_gameserveraddr(), target);
  }

  // int32 gameServerPort = 2;
  if (this->_internal_gameserverport() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_gameserverport(), target);
  }

  // string otp = 3;
  if (!this->_internal_otp().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_otp().data(), static_cast<int>(this->_internal_otp().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ClientToLoginRes.LoginRes.otp");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_otp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ClientToLoginRes.LoginRes)
  return target;
}

size_t ClientToLoginRes_LoginRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ClientToLoginRes.LoginRes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string gameServerAddr = 1;
  if (!this->_internal_gameserveraddr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gameserveraddr());
  }

  // string otp = 3;
  if (!this->_internal_otp().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_otp());
  }

  // int32 gameServerPort = 2;
  if (this->_internal_gameserverport() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_gameserverport());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClientToLoginRes_LoginRes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ClientToLoginRes_LoginRes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClientToLoginRes_LoginRes::GetClassData() const { return &_class_data_; }

void ClientToLoginRes_LoginRes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ClientToLoginRes_LoginRes *>(to)->MergeFrom(
      static_cast<const ClientToLoginRes_LoginRes &>(from));
}


void ClientToLoginRes_LoginRes::MergeFrom(const ClientToLoginRes_LoginRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ClientToLoginRes.LoginRes)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_gameserveraddr().empty()) {
    _internal_set_gameserveraddr(from._internal_gameserveraddr());
  }
  if (!from._internal_otp().empty()) {
    _internal_set_otp(from._internal_otp());
  }
  if (from._internal_gameserverport() != 0) {
    _internal_set_gameserverport(from._internal_gameserverport());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClientToLoginRes_LoginRes::CopyFrom(const ClientToLoginRes_LoginRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ClientToLoginRes.LoginRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientToLoginRes_LoginRes::IsInitialized() const {
  return true;
}

void ClientToLoginRes_LoginRes::InternalSwap(ClientToLoginRes_LoginRes* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &gameserveraddr_, lhs_arena,
      &other->gameserveraddr_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &otp_, lhs_arena,
      &other->otp_, rhs_arena
  );
  swap(gameserverport_, other->gameserverport_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientToLoginRes_LoginRes::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tutorial_2ehierarchy_2eproto_getter, &descriptor_table_tutorial_2ehierarchy_2eproto_once,
      file_level_metadata_tutorial_2ehierarchy_2eproto[4]);
}

// ===================================================================

class ClientToLoginRes_LogoutRes::_Internal {
 public:
};

ClientToLoginRes_LogoutRes::ClientToLoginRes_LogoutRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:ClientToLoginRes.LogoutRes)
}
ClientToLoginRes_LogoutRes::ClientToLoginRes_LogoutRes(const ClientToLoginRes_LogoutRes& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ClientToLoginRes.LogoutRes)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClientToLoginRes_LogoutRes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClientToLoginRes_LogoutRes::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ClientToLoginRes_LogoutRes::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tutorial_2ehierarchy_2eproto_getter, &descriptor_table_tutorial_2ehierarchy_2eproto_once,
      file_level_metadata_tutorial_2ehierarchy_2eproto[5]);
}

// ===================================================================

class ClientToLoginRes::_Internal {
 public:
  static const ::ClientToLoginRes_LoginRes& loginres(const ClientToLoginRes* msg);
  static const ::ClientToLoginRes_LogoutRes& logoutres(const ClientToLoginRes* msg);
};

const ::ClientToLoginRes_LoginRes&
ClientToLoginRes::_Internal::loginres(const ClientToLoginRes* msg) {
  return *msg->msg_.loginres_;
}
const ::ClientToLoginRes_LogoutRes&
ClientToLoginRes::_Internal::logoutres(const ClientToLoginRes* msg) {
  return *msg->msg_.logoutres_;
}
void ClientToLoginRes::set_allocated_loginres(::ClientToLoginRes_LoginRes* loginres) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_msg();
  if (loginres) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ClientToLoginRes_LoginRes>::GetOwningArena(loginres);
    if (message_arena != submessage_arena) {
      loginres = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, loginres, submessage_arena);
    }
    set_has_loginres();
    msg_.loginres_ = loginres;
  }
  // @@protoc_insertion_point(field_set_allocated:ClientToLoginRes.loginRes)
}
void ClientToLoginRes::set_allocated_logoutres(::ClientToLoginRes_LogoutRes* logoutres) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_msg();
  if (logoutres) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ClientToLoginRes_LogoutRes>::GetOwningArena(logoutres);
    if (message_arena != submessage_arena) {
      logoutres = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, logoutres, submessage_arena);
    }
    set_has_logoutres();
    msg_.logoutres_ = logoutres;
  }
  // @@protoc_insertion_point(field_set_allocated:ClientToLoginRes.logoutRes)
}
ClientToLoginRes::ClientToLoginRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ClientToLoginRes)
}
ClientToLoginRes::ClientToLoginRes(const ClientToLoginRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  errorcode_ = from.errorcode_;
  clear_has_msg();
  switch (from.msg_case()) {
    case kLoginRes: {
      _internal_mutable_loginres()->::ClientToLoginRes_LoginRes::MergeFrom(from._internal_loginres());
      break;
    }
    case kLogoutRes: {
      _internal_mutable_logoutres()->::ClientToLoginRes_LogoutRes::MergeFrom(from._internal_logoutres());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ClientToLoginRes)
}

inline void ClientToLoginRes::SharedCtor() {
errorcode_ = 0;
clear_has_msg();
}

ClientToLoginRes::~ClientToLoginRes() {
  // @@protoc_insertion_point(destructor:ClientToLoginRes)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ClientToLoginRes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_msg()) {
    clear_msg();
  }
}

void ClientToLoginRes::ArenaDtor(void* object) {
  ClientToLoginRes* _this = reinterpret_cast< ClientToLoginRes* >(object);
  (void)_this;
}
void ClientToLoginRes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClientToLoginRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClientToLoginRes::clear_msg() {
// @@protoc_insertion_point(one_of_clear_start:ClientToLoginRes)
  switch (msg_case()) {
    case kLoginRes: {
      if (GetArenaForAllocation() == nullptr) {
        delete msg_.loginres_;
      }
      break;
    }
    case kLogoutRes: {
      if (GetArenaForAllocation() == nullptr) {
        delete msg_.logoutres_;
      }
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MSG_NOT_SET;
}


void ClientToLoginRes::Clear() {
// @@protoc_insertion_point(message_clear_start:ClientToLoginRes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  errorcode_ = 0;
  clear_msg();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientToLoginRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ClientToLoginRes.LoginServerErrorCode errorCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_errorcode(static_cast<::ClientToLoginRes_LoginServerErrorCode>(val));
        } else
          goto handle_unusual;
        continue;
      // .ClientToLoginRes.LoginRes loginRes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_loginres(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ClientToLoginRes.LogoutRes logoutRes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_logoutres(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientToLoginRes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ClientToLoginRes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ClientToLoginRes.LoginServerErrorCode errorCode = 1;
  if (this->_internal_errorcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_errorcode(), target);
  }

  // .ClientToLoginRes.LoginRes loginRes = 2;
  if (_internal_has_loginres()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::loginres(this), target, stream);
  }

  // .ClientToLoginRes.LogoutRes logoutRes = 3;
  if (_internal_has_logoutres()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::logoutres(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ClientToLoginRes)
  return target;
}

size_t ClientToLoginRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ClientToLoginRes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ClientToLoginRes.LoginServerErrorCode errorCode = 1;
  if (this->_internal_errorcode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_errorcode());
  }

  switch (msg_case()) {
    // .ClientToLoginRes.LoginRes loginRes = 2;
    case kLoginRes: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.loginres_);
      break;
    }
    // .ClientToLoginRes.LogoutRes logoutRes = 3;
    case kLogoutRes: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.logoutres_);
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClientToLoginRes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ClientToLoginRes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClientToLoginRes::GetClassData() const { return &_class_data_; }

void ClientToLoginRes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ClientToLoginRes *>(to)->MergeFrom(
      static_cast<const ClientToLoginRes &>(from));
}


void ClientToLoginRes::MergeFrom(const ClientToLoginRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ClientToLoginRes)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_errorcode() != 0) {
    _internal_set_errorcode(from._internal_errorcode());
  }
  switch (from.msg_case()) {
    case kLoginRes: {
      _internal_mutable_loginres()->::ClientToLoginRes_LoginRes::MergeFrom(from._internal_loginres());
      break;
    }
    case kLogoutRes: {
      _internal_mutable_logoutres()->::ClientToLoginRes_LogoutRes::MergeFrom(from._internal_logoutres());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClientToLoginRes::CopyFrom(const ClientToLoginRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ClientToLoginRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientToLoginRes::IsInitialized() const {
  return true;
}

void ClientToLoginRes::InternalSwap(ClientToLoginRes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(errorcode_, other->errorcode_);
  swap(msg_, other->msg_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientToLoginRes::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tutorial_2ehierarchy_2eproto_getter, &descriptor_table_tutorial_2ehierarchy_2eproto_once,
      file_level_metadata_tutorial_2ehierarchy_2eproto[6]);
}

// ===================================================================

class ClientToLoginMessage_MyHome::_Internal {
 public:
};

ClientToLoginMessage_MyHome::ClientToLoginMessage_MyHome(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  slotinfo_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ClientToLoginMessage.MyHome)
}
ClientToLoginMessage_MyHome::ClientToLoginMessage_MyHome(const ClientToLoginMessage_MyHome& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      slotinfo_(from.slotinfo_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:ClientToLoginMessage.MyHome)
}

inline void ClientToLoginMessage_MyHome::SharedCtor() {
id_ = 0;
}

ClientToLoginMessage_MyHome::~ClientToLoginMessage_MyHome() {
  // @@protoc_insertion_point(destructor:ClientToLoginMessage.MyHome)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ClientToLoginMessage_MyHome::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ClientToLoginMessage_MyHome::ArenaDtor(void* object) {
  ClientToLoginMessage_MyHome* _this = reinterpret_cast< ClientToLoginMessage_MyHome* >(object);
  (void)_this;
}
void ClientToLoginMessage_MyHome::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClientToLoginMessage_MyHome::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClientToLoginMessage_MyHome::Clear() {
// @@protoc_insertion_point(message_clear_start:ClientToLoginMessage.MyHome)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  slotinfo_.Clear();
  id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientToLoginMessage_MyHome::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .MyHomeObjectSlotInfo slotInfo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_slotinfo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientToLoginMessage_MyHome::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ClientToLoginMessage.MyHome)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // repeated .MyHomeObjectSlotInfo slotInfo = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_slotinfo_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_slotinfo(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ClientToLoginMessage.MyHome)
  return target;
}

size_t ClientToLoginMessage_MyHome::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ClientToLoginMessage.MyHome)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .MyHomeObjectSlotInfo slotInfo = 2;
  total_size += 1UL * this->_internal_slotinfo_size();
  for (const auto& msg : this->slotinfo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClientToLoginMessage_MyHome::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ClientToLoginMessage_MyHome::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClientToLoginMessage_MyHome::GetClassData() const { return &_class_data_; }

void ClientToLoginMessage_MyHome::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ClientToLoginMessage_MyHome *>(to)->MergeFrom(
      static_cast<const ClientToLoginMessage_MyHome &>(from));
}


void ClientToLoginMessage_MyHome::MergeFrom(const ClientToLoginMessage_MyHome& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ClientToLoginMessage.MyHome)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  slotinfo_.MergeFrom(from.slotinfo_);
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClientToLoginMessage_MyHome::CopyFrom(const ClientToLoginMessage_MyHome& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ClientToLoginMessage.MyHome)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientToLoginMessage_MyHome::IsInitialized() const {
  return true;
}

void ClientToLoginMessage_MyHome::InternalSwap(ClientToLoginMessage_MyHome* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  slotinfo_.InternalSwap(&other->slotinfo_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientToLoginMessage_MyHome::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tutorial_2ehierarchy_2eproto_getter, &descriptor_table_tutorial_2ehierarchy_2eproto_once,
      file_level_metadata_tutorial_2ehierarchy_2eproto[7]);
}

// ===================================================================

class ClientToLoginMessage::_Internal {
 public:
  static const ::ClientToLoginMessage_MyHome& myhome(const ClientToLoginMessage* msg);
};

const ::ClientToLoginMessage_MyHome&
ClientToLoginMessage::_Internal::myhome(const ClientToLoginMessage* msg) {
  return *msg->msg_.myhome_;
}
void ClientToLoginMessage::set_allocated_myhome(::ClientToLoginMessage_MyHome* myhome) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_msg();
  if (myhome) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ClientToLoginMessage_MyHome>::GetOwningArena(myhome);
    if (message_arena != submessage_arena) {
      myhome = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, myhome, submessage_arena);
    }
    set_has_myhome();
    msg_.myhome_ = myhome;
  }
  // @@protoc_insertion_point(field_set_allocated:ClientToLoginMessage.myHome)
}
ClientToLoginMessage::ClientToLoginMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ClientToLoginMessage)
}
ClientToLoginMessage::ClientToLoginMessage(const ClientToLoginMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_msg();
  switch (from.msg_case()) {
    case kMyHome: {
      _internal_mutable_myhome()->::ClientToLoginMessage_MyHome::MergeFrom(from._internal_myhome());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ClientToLoginMessage)
}

inline void ClientToLoginMessage::SharedCtor() {
clear_has_msg();
}

ClientToLoginMessage::~ClientToLoginMessage() {
  // @@protoc_insertion_point(destructor:ClientToLoginMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ClientToLoginMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_msg()) {
    clear_msg();
  }
}

void ClientToLoginMessage::ArenaDtor(void* object) {
  ClientToLoginMessage* _this = reinterpret_cast< ClientToLoginMessage* >(object);
  (void)_this;
}
void ClientToLoginMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClientToLoginMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClientToLoginMessage::clear_msg() {
// @@protoc_insertion_point(one_of_clear_start:ClientToLoginMessage)
  switch (msg_case()) {
    case kMyHome: {
      if (GetArenaForAllocation() == nullptr) {
        delete msg_.myhome_;
      }
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MSG_NOT_SET;
}


void ClientToLoginMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:ClientToLoginMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_msg();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientToLoginMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ClientToLoginMessage.MyHome myHome = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_myhome(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientToLoginMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ClientToLoginMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ClientToLoginMessage.MyHome myHome = 1;
  if (_internal_has_myhome()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::myhome(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ClientToLoginMessage)
  return target;
}

size_t ClientToLoginMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ClientToLoginMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (msg_case()) {
    // .ClientToLoginMessage.MyHome myHome = 1;
    case kMyHome: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.myhome_);
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClientToLoginMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ClientToLoginMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClientToLoginMessage::GetClassData() const { return &_class_data_; }

void ClientToLoginMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ClientToLoginMessage *>(to)->MergeFrom(
      static_cast<const ClientToLoginMessage &>(from));
}


void ClientToLoginMessage::MergeFrom(const ClientToLoginMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ClientToLoginMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.msg_case()) {
    case kMyHome: {
      _internal_mutable_myhome()->::ClientToLoginMessage_MyHome::MergeFrom(from._internal_myhome());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClientToLoginMessage::CopyFrom(const ClientToLoginMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ClientToLoginMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientToLoginMessage::IsInitialized() const {
  return true;
}

void ClientToLoginMessage::InternalSwap(ClientToLoginMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(msg_, other->msg_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientToLoginMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tutorial_2ehierarchy_2eproto_getter, &descriptor_table_tutorial_2ehierarchy_2eproto_once,
      file_level_metadata_tutorial_2ehierarchy_2eproto[8]);
}

// ===================================================================

class ClientToLogin::_Internal {
 public:
  static const ::ClientToLoginReq& request(const ClientToLogin* msg);
  static const ::ClientToLoginRes& response(const ClientToLogin* msg);
  static const ::ClientToLoginMessage& message(const ClientToLogin* msg);
};

const ::ClientToLoginReq&
ClientToLogin::_Internal::request(const ClientToLogin* msg) {
  return *msg->msg_.request_;
}
const ::ClientToLoginRes&
ClientToLogin::_Internal::response(const ClientToLogin* msg) {
  return *msg->msg_.response_;
}
const ::ClientToLoginMessage&
ClientToLogin::_Internal::message(const ClientToLogin* msg) {
  return *msg->msg_.message_;
}
void ClientToLogin::set_allocated_request(::ClientToLoginReq* request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_msg();
  if (request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ClientToLoginReq>::GetOwningArena(request);
    if (message_arena != submessage_arena) {
      request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, request, submessage_arena);
    }
    set_has_request();
    msg_.request_ = request;
  }
  // @@protoc_insertion_point(field_set_allocated:ClientToLogin.request)
}
void ClientToLogin::set_allocated_response(::ClientToLoginRes* response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_msg();
  if (response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ClientToLoginRes>::GetOwningArena(response);
    if (message_arena != submessage_arena) {
      response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, response, submessage_arena);
    }
    set_has_response();
    msg_.response_ = response;
  }
  // @@protoc_insertion_point(field_set_allocated:ClientToLogin.response)
}
void ClientToLogin::set_allocated_message(::ClientToLoginMessage* message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_msg();
  if (message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ClientToLoginMessage>::GetOwningArena(message);
    if (message_arena != submessage_arena) {
      message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message, submessage_arena);
    }
    set_has_message();
    msg_.message_ = message;
  }
  // @@protoc_insertion_point(field_set_allocated:ClientToLogin.message)
}
ClientToLogin::ClientToLogin(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ClientToLogin)
}
ClientToLogin::ClientToLogin(const ClientToLogin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_msg();
  switch (from.msg_case()) {
    case kRequest: {
      _internal_mutable_request()->::ClientToLoginReq::MergeFrom(from._internal_request());
      break;
    }
    case kResponse: {
      _internal_mutable_response()->::ClientToLoginRes::MergeFrom(from._internal_response());
      break;
    }
    case kMessage: {
      _internal_mutable_message()->::ClientToLoginMessage::MergeFrom(from._internal_message());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ClientToLogin)
}

inline void ClientToLogin::SharedCtor() {
clear_has_msg();
}

ClientToLogin::~ClientToLogin() {
  // @@protoc_insertion_point(destructor:ClientToLogin)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ClientToLogin::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_msg()) {
    clear_msg();
  }
}

void ClientToLogin::ArenaDtor(void* object) {
  ClientToLogin* _this = reinterpret_cast< ClientToLogin* >(object);
  (void)_this;
}
void ClientToLogin::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClientToLogin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClientToLogin::clear_msg() {
// @@protoc_insertion_point(one_of_clear_start:ClientToLogin)
  switch (msg_case()) {
    case kRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete msg_.request_;
      }
      break;
    }
    case kResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete msg_.response_;
      }
      break;
    }
    case kMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete msg_.message_;
      }
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MSG_NOT_SET;
}


void ClientToLogin::Clear() {
// @@protoc_insertion_point(message_clear_start:ClientToLogin)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_msg();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientToLogin::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ClientToLoginReq request = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ClientToLoginRes response = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ClientToLoginMessage message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientToLogin::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ClientToLogin)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ClientToLoginReq request = 1;
  if (_internal_has_request()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::request(this), target, stream);
  }

  // .ClientToLoginRes response = 2;
  if (_internal_has_response()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::response(this), target, stream);
  }

  // .ClientToLoginMessage message = 3;
  if (_internal_has_message()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::message(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ClientToLogin)
  return target;
}

size_t ClientToLogin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ClientToLogin)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (msg_case()) {
    // .ClientToLoginReq request = 1;
    case kRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.request_);
      break;
    }
    // .ClientToLoginRes response = 2;
    case kResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.response_);
      break;
    }
    // .ClientToLoginMessage message = 3;
    case kMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.message_);
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClientToLogin::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ClientToLogin::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClientToLogin::GetClassData() const { return &_class_data_; }

void ClientToLogin::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ClientToLogin *>(to)->MergeFrom(
      static_cast<const ClientToLogin &>(from));
}


void ClientToLogin::MergeFrom(const ClientToLogin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ClientToLogin)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.msg_case()) {
    case kRequest: {
      _internal_mutable_request()->::ClientToLoginReq::MergeFrom(from._internal_request());
      break;
    }
    case kResponse: {
      _internal_mutable_response()->::ClientToLoginRes::MergeFrom(from._internal_response());
      break;
    }
    case kMessage: {
      _internal_mutable_message()->::ClientToLoginMessage::MergeFrom(from._internal_message());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClientToLogin::CopyFrom(const ClientToLogin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ClientToLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientToLogin::IsInitialized() const {
  return true;
}

void ClientToLogin::InternalSwap(ClientToLogin* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(msg_, other->msg_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientToLogin::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tutorial_2ehierarchy_2eproto_getter, &descriptor_table_tutorial_2ehierarchy_2eproto_once,
      file_level_metadata_tutorial_2ehierarchy_2eproto[9]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::MyHomeObjectSlotInfo* Arena::CreateMaybeMessage< ::MyHomeObjectSlotInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MyHomeObjectSlotInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ClientToLoginReq_LoginReq* Arena::CreateMaybeMessage< ::ClientToLoginReq_LoginReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ClientToLoginReq_LoginReq >(arena);
}
template<> PROTOBUF_NOINLINE ::ClientToLoginReq_LogoutReq* Arena::CreateMaybeMessage< ::ClientToLoginReq_LogoutReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ClientToLoginReq_LogoutReq >(arena);
}
template<> PROTOBUF_NOINLINE ::ClientToLoginReq* Arena::CreateMaybeMessage< ::ClientToLoginReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ClientToLoginReq >(arena);
}
template<> PROTOBUF_NOINLINE ::ClientToLoginRes_LoginRes* Arena::CreateMaybeMessage< ::ClientToLoginRes_LoginRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ClientToLoginRes_LoginRes >(arena);
}
template<> PROTOBUF_NOINLINE ::ClientToLoginRes_LogoutRes* Arena::CreateMaybeMessage< ::ClientToLoginRes_LogoutRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ClientToLoginRes_LogoutRes >(arena);
}
template<> PROTOBUF_NOINLINE ::ClientToLoginRes* Arena::CreateMaybeMessage< ::ClientToLoginRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ClientToLoginRes >(arena);
}
template<> PROTOBUF_NOINLINE ::ClientToLoginMessage_MyHome* Arena::CreateMaybeMessage< ::ClientToLoginMessage_MyHome >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ClientToLoginMessage_MyHome >(arena);
}
template<> PROTOBUF_NOINLINE ::ClientToLoginMessage* Arena::CreateMaybeMessage< ::ClientToLoginMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ClientToLoginMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::ClientToLogin* Arena::CreateMaybeMessage< ::ClientToLogin >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ClientToLogin >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
