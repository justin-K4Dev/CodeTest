// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tutorial.player.proto

#include "tutorial.player.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace tutorial {
constexpr Player_PhoneNumber::Player_PhoneNumber(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : number_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(0)
{}
struct Player_PhoneNumberDefaultTypeInternal {
  constexpr Player_PhoneNumberDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Player_PhoneNumberDefaultTypeInternal() {}
  union {
    Player_PhoneNumber _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Player_PhoneNumberDefaultTypeInternal _Player_PhoneNumber_default_instance_;
constexpr Player_Item::Player_Item(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(uint64_t{0u})
  , itemtid_(0){}
struct Player_ItemDefaultTypeInternal {
  constexpr Player_ItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Player_ItemDefaultTypeInternal() {}
  union {
    Player_Item _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Player_ItemDefaultTypeInternal _Player_Item_default_instance_;
constexpr Player_ItemsEntry_DoNotUse::Player_ItemsEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct Player_ItemsEntry_DoNotUseDefaultTypeInternal {
  constexpr Player_ItemsEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Player_ItemsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Player_ItemsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Player_ItemsEntry_DoNotUseDefaultTypeInternal _Player_ItemsEntry_DoNotUse_default_instance_;
constexpr Player_MobilePhone::Player_MobilePhone(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : device_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct Player_MobilePhoneDefaultTypeInternal {
  constexpr Player_MobilePhoneDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Player_MobilePhoneDefaultTypeInternal() {}
  union {
    Player_MobilePhone _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Player_MobilePhoneDefaultTypeInternal _Player_MobilePhone_default_instance_;
constexpr Player_Watch::Player_Watch(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : device_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct Player_WatchDefaultTypeInternal {
  constexpr Player_WatchDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Player_WatchDefaultTypeInternal() {}
  union {
    Player_Watch _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Player_WatchDefaultTypeInternal _Player_Watch_default_instance_;
constexpr Player_Wallet::Player_Wallet(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : items_(){}
struct Player_WalletDefaultTypeInternal {
  constexpr Player_WalletDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Player_WalletDefaultTypeInternal() {}
  union {
    Player_Wallet _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Player_WalletDefaultTypeInternal _Player_Wallet_default_instance_;
constexpr Player_Bag::Player_Bag(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : wallets_(){}
struct Player_BagDefaultTypeInternal {
  constexpr Player_BagDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Player_BagDefaultTypeInternal() {}
  union {
    Player_Bag _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Player_BagDefaultTypeInternal _Player_Bag_default_instance_;
constexpr Player_Box_ItemsEntry_DoNotUse::Player_Box_ItemsEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct Player_Box_ItemsEntry_DoNotUseDefaultTypeInternal {
  constexpr Player_Box_ItemsEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Player_Box_ItemsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Player_Box_ItemsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Player_Box_ItemsEntry_DoNotUseDefaultTypeInternal _Player_Box_ItemsEntry_DoNotUse_default_instance_;
constexpr Player_Box::Player_Box(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : items_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}){}
struct Player_BoxDefaultTypeInternal {
  constexpr Player_BoxDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Player_BoxDefaultTypeInternal() {}
  union {
    Player_Box _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Player_BoxDefaultTypeInternal _Player_Box_default_instance_;
constexpr Player_MyTrunk_BoxsEntry_DoNotUse::Player_MyTrunk_BoxsEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct Player_MyTrunk_BoxsEntry_DoNotUseDefaultTypeInternal {
  constexpr Player_MyTrunk_BoxsEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Player_MyTrunk_BoxsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Player_MyTrunk_BoxsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Player_MyTrunk_BoxsEntry_DoNotUseDefaultTypeInternal _Player_MyTrunk_BoxsEntry_DoNotUse_default_instance_;
constexpr Player_MyTrunk::Player_MyTrunk(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : boxs_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}){}
struct Player_MyTrunkDefaultTypeInternal {
  constexpr Player_MyTrunkDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Player_MyTrunkDefaultTypeInternal() {}
  union {
    Player_MyTrunk _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Player_MyTrunkDefaultTypeInternal _Player_MyTrunk_default_instance_;
constexpr Player_MyTrunksEntry_DoNotUse::Player_MyTrunksEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct Player_MyTrunksEntry_DoNotUseDefaultTypeInternal {
  constexpr Player_MyTrunksEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Player_MyTrunksEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Player_MyTrunksEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Player_MyTrunksEntry_DoNotUseDefaultTypeInternal _Player_MyTrunksEntry_DoNotUse_default_instance_;
constexpr Player::Player(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : phones_()
  , items_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , bags_()
  , mytrunks_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , email_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(uint64_t{0u})
  , _oneof_case_{}{}
struct PlayerDefaultTypeInternal {
  constexpr PlayerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PlayerDefaultTypeInternal() {}
  union {
    Player _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PlayerDefaultTypeInternal _Player_default_instance_;
}  // namespace tutorial
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_tutorial_2eplayer_2eproto[13];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_tutorial_2eplayer_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_tutorial_2eplayer_2eproto = nullptr;

const uint32_t TableStruct_tutorial_2eplayer_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tutorial::Player_PhoneNumber, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tutorial::Player_PhoneNumber, number_),
  PROTOBUF_FIELD_OFFSET(::tutorial::Player_PhoneNumber, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tutorial::Player_Item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tutorial::Player_Item, id_),
  PROTOBUF_FIELD_OFFSET(::tutorial::Player_Item, itemtid_),
  PROTOBUF_FIELD_OFFSET(::tutorial::Player_ItemsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tutorial::Player_ItemsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tutorial::Player_ItemsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::tutorial::Player_ItemsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tutorial::Player_MobilePhone, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tutorial::Player_MobilePhone, device_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tutorial::Player_Watch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tutorial::Player_Watch, device_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tutorial::Player_Wallet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tutorial::Player_Wallet, items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tutorial::Player_Bag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tutorial::Player_Bag, wallets_),
  PROTOBUF_FIELD_OFFSET(::tutorial::Player_Box_ItemsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tutorial::Player_Box_ItemsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tutorial::Player_Box_ItemsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::tutorial::Player_Box_ItemsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tutorial::Player_Box, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tutorial::Player_Box, items_),
  PROTOBUF_FIELD_OFFSET(::tutorial::Player_MyTrunk_BoxsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tutorial::Player_MyTrunk_BoxsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tutorial::Player_MyTrunk_BoxsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::tutorial::Player_MyTrunk_BoxsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tutorial::Player_MyTrunk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tutorial::Player_MyTrunk, boxs_),
  PROTOBUF_FIELD_OFFSET(::tutorial::Player_MyTrunksEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tutorial::Player_MyTrunksEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tutorial::Player_MyTrunksEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::tutorial::Player_MyTrunksEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tutorial::Player, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::tutorial::Player, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tutorial::Player, id_),
  PROTOBUF_FIELD_OFFSET(::tutorial::Player, name_),
  PROTOBUF_FIELD_OFFSET(::tutorial::Player, email_),
  PROTOBUF_FIELD_OFFSET(::tutorial::Player, phones_),
  PROTOBUF_FIELD_OFFSET(::tutorial::Player, items_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::tutorial::Player, bags_),
  PROTOBUF_FIELD_OFFSET(::tutorial::Player, mytrunks_),
  PROTOBUF_FIELD_OFFSET(::tutorial::Player, msg_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::tutorial::Player_PhoneNumber)},
  { 8, -1, -1, sizeof(::tutorial::Player_Item)},
  { 16, 24, -1, sizeof(::tutorial::Player_ItemsEntry_DoNotUse)},
  { 26, -1, -1, sizeof(::tutorial::Player_MobilePhone)},
  { 33, -1, -1, sizeof(::tutorial::Player_Watch)},
  { 40, -1, -1, sizeof(::tutorial::Player_Wallet)},
  { 47, -1, -1, sizeof(::tutorial::Player_Bag)},
  { 54, 62, -1, sizeof(::tutorial::Player_Box_ItemsEntry_DoNotUse)},
  { 64, -1, -1, sizeof(::tutorial::Player_Box)},
  { 71, 79, -1, sizeof(::tutorial::Player_MyTrunk_BoxsEntry_DoNotUse)},
  { 81, -1, -1, sizeof(::tutorial::Player_MyTrunk)},
  { 88, 96, -1, sizeof(::tutorial::Player_MyTrunksEntry_DoNotUse)},
  { 98, -1, -1, sizeof(::tutorial::Player)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tutorial::_Player_PhoneNumber_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tutorial::_Player_Item_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tutorial::_Player_ItemsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tutorial::_Player_MobilePhone_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tutorial::_Player_Watch_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tutorial::_Player_Wallet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tutorial::_Player_Bag_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tutorial::_Player_Box_ItemsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tutorial::_Player_Box_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tutorial::_Player_MyTrunk_BoxsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tutorial::_Player_MyTrunk_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tutorial::_Player_MyTrunksEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tutorial::_Player_default_instance_),
};

const char descriptor_table_protodef_tutorial_2eplayer_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025tutorial.player.proto\022\010tutorial\"\206\010\n\006Pl"
  "ayer\022\n\n\002id\030\001 \001(\004\022\014\n\004name\030\002 \001(\t\022\r\n\005email\030"
  "\003 \001(\t\022,\n\006phones\030\004 \003(\0132\034.tutorial.Player."
  "PhoneNumber\022*\n\005items\030\005 \003(\0132\033.tutorial.Pl"
  "ayer.ItemsEntry\0223\n\013mobilePhone\030\006 \001(\0132\034.t"
  "utorial.Player.MobilePhoneH\000\022\'\n\005watch\030\007 "
  "\001(\0132\026.tutorial.Player.WatchH\000\022\"\n\004bags\030\010 "
  "\003(\0132\024.tutorial.Player.Bag\0220\n\010myTrunks\030\t "
  "\003(\0132\036.tutorial.Player.MyTrunksEntry\032G\n\013P"
  "honeNumber\022\016\n\006number\030\001 \001(\t\022(\n\004type\030\002 \001(\016"
  "2\032.tutorial.Player.PhoneType\032#\n\004Item\022\n\n\002"
  "id\030\001 \001(\004\022\017\n\007itemTid\030\002 \001(\005\032C\n\nItemsEntry\022"
  "\013\n\003key\030\001 \001(\004\022$\n\005value\030\002 \001(\0132\025.tutorial.P"
  "layer.Item:\0028\001\032\035\n\013MobilePhone\022\016\n\006device\030"
  "\001 \001(\t\032\027\n\005Watch\022\016\n\006device\030\001 \001(\t\032.\n\006Wallet"
  "\022$\n\005items\030\001 \003(\0132\025.tutorial.Player.Item\032/"
  "\n\003Bag\022(\n\007wallets\030\001 \003(\0132\027.tutorial.Player"
  ".Wallet\032z\n\003Box\022.\n\005items\030\001 \003(\0132\037.tutorial"
  ".Player.Box.ItemsEntry\032C\n\nItemsEntry\022\013\n\003"
  "key\030\001 \001(\004\022$\n\005value\030\002 \001(\0132\025.tutorial.Play"
  "er.Item:\0028\001\032~\n\007MyTrunk\0220\n\004boxs\030\001 \003(\0132\".t"
  "utorial.Player.MyTrunk.BoxsEntry\032A\n\tBoxs"
  "Entry\022\013\n\003key\030\001 \001(\004\022#\n\005value\030\002 \001(\0132\024.tuto"
  "rial.Player.Box:\0028\001\032I\n\rMyTrunksEntry\022\013\n\003"
  "key\030\001 \001(\004\022\'\n\005value\030\002 \001(\0132\030.tutorial.Play"
  "er.MyTrunk:\0028\001\"+\n\tPhoneType\022\n\n\006MOBILE\020\000\022"
  "\010\n\004HOME\020\001\022\010\n\004WORK\020\002B\005\n\003msgb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_tutorial_2eplayer_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tutorial_2eplayer_2eproto = {
  false, false, 1074, descriptor_table_protodef_tutorial_2eplayer_2eproto, "tutorial.player.proto", 
  &descriptor_table_tutorial_2eplayer_2eproto_once, nullptr, 0, 13,
  schemas, file_default_instances, TableStruct_tutorial_2eplayer_2eproto::offsets,
  file_level_metadata_tutorial_2eplayer_2eproto, file_level_enum_descriptors_tutorial_2eplayer_2eproto, file_level_service_descriptors_tutorial_2eplayer_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_tutorial_2eplayer_2eproto_getter() {
  return &descriptor_table_tutorial_2eplayer_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_tutorial_2eplayer_2eproto(&descriptor_table_tutorial_2eplayer_2eproto);
namespace tutorial {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Player_PhoneType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tutorial_2eplayer_2eproto);
  return file_level_enum_descriptors_tutorial_2eplayer_2eproto[0];
}
bool Player_PhoneType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Player_PhoneType Player::MOBILE;
constexpr Player_PhoneType Player::HOME;
constexpr Player_PhoneType Player::WORK;
constexpr Player_PhoneType Player::PhoneType_MIN;
constexpr Player_PhoneType Player::PhoneType_MAX;
constexpr int Player::PhoneType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class Player_PhoneNumber::_Internal {
 public:
};

Player_PhoneNumber::Player_PhoneNumber(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tutorial.Player.PhoneNumber)
}
Player_PhoneNumber::Player_PhoneNumber(const Player_PhoneNumber& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_number().empty()) {
    number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_number(), 
      GetArenaForAllocation());
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:tutorial.Player.PhoneNumber)
}

inline void Player_PhoneNumber::SharedCtor() {
number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
type_ = 0;
}

Player_PhoneNumber::~Player_PhoneNumber() {
  // @@protoc_insertion_point(destructor:tutorial.Player.PhoneNumber)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Player_PhoneNumber::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  number_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Player_PhoneNumber::ArenaDtor(void* object) {
  Player_PhoneNumber* _this = reinterpret_cast< Player_PhoneNumber* >(object);
  (void)_this;
}
void Player_PhoneNumber::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Player_PhoneNumber::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Player_PhoneNumber::Clear() {
// @@protoc_insertion_point(message_clear_start:tutorial.Player.PhoneNumber)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  number_.ClearToEmpty();
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Player_PhoneNumber::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_number();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tutorial.Player.PhoneNumber.number"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tutorial.Player.PhoneType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::tutorial::Player_PhoneType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Player_PhoneNumber::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tutorial.Player.PhoneNumber)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string number = 1;
  if (!this->_internal_number().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_number().data(), static_cast<int>(this->_internal_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tutorial.Player.PhoneNumber.number");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_number(), target);
  }

  // .tutorial.Player.PhoneType type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tutorial.Player.PhoneNumber)
  return target;
}

size_t Player_PhoneNumber::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tutorial.Player.PhoneNumber)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string number = 1;
  if (!this->_internal_number().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_number());
  }

  // .tutorial.Player.PhoneType type = 2;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Player_PhoneNumber::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Player_PhoneNumber::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Player_PhoneNumber::GetClassData() const { return &_class_data_; }

void Player_PhoneNumber::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Player_PhoneNumber *>(to)->MergeFrom(
      static_cast<const Player_PhoneNumber &>(from));
}


void Player_PhoneNumber::MergeFrom(const Player_PhoneNumber& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tutorial.Player.PhoneNumber)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_number().empty()) {
    _internal_set_number(from._internal_number());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Player_PhoneNumber::CopyFrom(const Player_PhoneNumber& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tutorial.Player.PhoneNumber)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Player_PhoneNumber::IsInitialized() const {
  return true;
}

void Player_PhoneNumber::InternalSwap(Player_PhoneNumber* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &number_, lhs_arena,
      &other->number_, rhs_arena
  );
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Player_PhoneNumber::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tutorial_2eplayer_2eproto_getter, &descriptor_table_tutorial_2eplayer_2eproto_once,
      file_level_metadata_tutorial_2eplayer_2eproto[0]);
}

// ===================================================================

class Player_Item::_Internal {
 public:
};

Player_Item::Player_Item(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tutorial.Player.Item)
}
Player_Item::Player_Item(const Player_Item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&itemtid_) -
    reinterpret_cast<char*>(&id_)) + sizeof(itemtid_));
  // @@protoc_insertion_point(copy_constructor:tutorial.Player.Item)
}

inline void Player_Item::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&itemtid_) -
    reinterpret_cast<char*>(&id_)) + sizeof(itemtid_));
}

Player_Item::~Player_Item() {
  // @@protoc_insertion_point(destructor:tutorial.Player.Item)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Player_Item::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Player_Item::ArenaDtor(void* object) {
  Player_Item* _this = reinterpret_cast< Player_Item* >(object);
  (void)_this;
}
void Player_Item::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Player_Item::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Player_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:tutorial.Player.Item)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&itemtid_) -
      reinterpret_cast<char*>(&id_)) + sizeof(itemtid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Player_Item::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 itemTid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          itemtid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Player_Item::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tutorial.Player.Item)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // int32 itemTid = 2;
  if (this->_internal_itemtid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_itemtid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tutorial.Player.Item)
  return target;
}

size_t Player_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tutorial.Player.Item)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_id());
  }

  // int32 itemTid = 2;
  if (this->_internal_itemtid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_itemtid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Player_Item::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Player_Item::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Player_Item::GetClassData() const { return &_class_data_; }

void Player_Item::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Player_Item *>(to)->MergeFrom(
      static_cast<const Player_Item &>(from));
}


void Player_Item::MergeFrom(const Player_Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tutorial.Player.Item)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_itemtid() != 0) {
    _internal_set_itemtid(from._internal_itemtid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Player_Item::CopyFrom(const Player_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tutorial.Player.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Player_Item::IsInitialized() const {
  return true;
}

void Player_Item::InternalSwap(Player_Item* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Player_Item, itemtid_)
      + sizeof(Player_Item::itemtid_)
      - PROTOBUF_FIELD_OFFSET(Player_Item, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Player_Item::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tutorial_2eplayer_2eproto_getter, &descriptor_table_tutorial_2eplayer_2eproto_once,
      file_level_metadata_tutorial_2eplayer_2eproto[1]);
}

// ===================================================================

Player_ItemsEntry_DoNotUse::Player_ItemsEntry_DoNotUse() {}
Player_ItemsEntry_DoNotUse::Player_ItemsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Player_ItemsEntry_DoNotUse::MergeFrom(const Player_ItemsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Player_ItemsEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tutorial_2eplayer_2eproto_getter, &descriptor_table_tutorial_2eplayer_2eproto_once,
      file_level_metadata_tutorial_2eplayer_2eproto[2]);
}

// ===================================================================

class Player_MobilePhone::_Internal {
 public:
};

Player_MobilePhone::Player_MobilePhone(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tutorial.Player.MobilePhone)
}
Player_MobilePhone::Player_MobilePhone(const Player_MobilePhone& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  device_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    device_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_device().empty()) {
    device_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_device(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:tutorial.Player.MobilePhone)
}

inline void Player_MobilePhone::SharedCtor() {
device_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  device_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Player_MobilePhone::~Player_MobilePhone() {
  // @@protoc_insertion_point(destructor:tutorial.Player.MobilePhone)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Player_MobilePhone::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  device_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Player_MobilePhone::ArenaDtor(void* object) {
  Player_MobilePhone* _this = reinterpret_cast< Player_MobilePhone* >(object);
  (void)_this;
}
void Player_MobilePhone::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Player_MobilePhone::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Player_MobilePhone::Clear() {
// @@protoc_insertion_point(message_clear_start:tutorial.Player.MobilePhone)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Player_MobilePhone::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string device = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_device();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tutorial.Player.MobilePhone.device"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Player_MobilePhone::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tutorial.Player.MobilePhone)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string device = 1;
  if (!this->_internal_device().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device().data(), static_cast<int>(this->_internal_device().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tutorial.Player.MobilePhone.device");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_device(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tutorial.Player.MobilePhone)
  return target;
}

size_t Player_MobilePhone::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tutorial.Player.MobilePhone)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string device = 1;
  if (!this->_internal_device().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Player_MobilePhone::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Player_MobilePhone::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Player_MobilePhone::GetClassData() const { return &_class_data_; }

void Player_MobilePhone::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Player_MobilePhone *>(to)->MergeFrom(
      static_cast<const Player_MobilePhone &>(from));
}


void Player_MobilePhone::MergeFrom(const Player_MobilePhone& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tutorial.Player.MobilePhone)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_device().empty()) {
    _internal_set_device(from._internal_device());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Player_MobilePhone::CopyFrom(const Player_MobilePhone& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tutorial.Player.MobilePhone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Player_MobilePhone::IsInitialized() const {
  return true;
}

void Player_MobilePhone::InternalSwap(Player_MobilePhone* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &device_, lhs_arena,
      &other->device_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Player_MobilePhone::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tutorial_2eplayer_2eproto_getter, &descriptor_table_tutorial_2eplayer_2eproto_once,
      file_level_metadata_tutorial_2eplayer_2eproto[3]);
}

// ===================================================================

class Player_Watch::_Internal {
 public:
};

Player_Watch::Player_Watch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tutorial.Player.Watch)
}
Player_Watch::Player_Watch(const Player_Watch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  device_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    device_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_device().empty()) {
    device_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_device(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:tutorial.Player.Watch)
}

inline void Player_Watch::SharedCtor() {
device_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  device_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Player_Watch::~Player_Watch() {
  // @@protoc_insertion_point(destructor:tutorial.Player.Watch)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Player_Watch::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  device_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Player_Watch::ArenaDtor(void* object) {
  Player_Watch* _this = reinterpret_cast< Player_Watch* >(object);
  (void)_this;
}
void Player_Watch::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Player_Watch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Player_Watch::Clear() {
// @@protoc_insertion_point(message_clear_start:tutorial.Player.Watch)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Player_Watch::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string device = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_device();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tutorial.Player.Watch.device"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Player_Watch::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tutorial.Player.Watch)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string device = 1;
  if (!this->_internal_device().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device().data(), static_cast<int>(this->_internal_device().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tutorial.Player.Watch.device");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_device(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tutorial.Player.Watch)
  return target;
}

size_t Player_Watch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tutorial.Player.Watch)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string device = 1;
  if (!this->_internal_device().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Player_Watch::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Player_Watch::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Player_Watch::GetClassData() const { return &_class_data_; }

void Player_Watch::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Player_Watch *>(to)->MergeFrom(
      static_cast<const Player_Watch &>(from));
}


void Player_Watch::MergeFrom(const Player_Watch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tutorial.Player.Watch)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_device().empty()) {
    _internal_set_device(from._internal_device());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Player_Watch::CopyFrom(const Player_Watch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tutorial.Player.Watch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Player_Watch::IsInitialized() const {
  return true;
}

void Player_Watch::InternalSwap(Player_Watch* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &device_, lhs_arena,
      &other->device_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Player_Watch::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tutorial_2eplayer_2eproto_getter, &descriptor_table_tutorial_2eplayer_2eproto_once,
      file_level_metadata_tutorial_2eplayer_2eproto[4]);
}

// ===================================================================

class Player_Wallet::_Internal {
 public:
};

Player_Wallet::Player_Wallet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  items_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tutorial.Player.Wallet)
}
Player_Wallet::Player_Wallet(const Player_Wallet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      items_(from.items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tutorial.Player.Wallet)
}

inline void Player_Wallet::SharedCtor() {
}

Player_Wallet::~Player_Wallet() {
  // @@protoc_insertion_point(destructor:tutorial.Player.Wallet)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Player_Wallet::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Player_Wallet::ArenaDtor(void* object) {
  Player_Wallet* _this = reinterpret_cast< Player_Wallet* >(object);
  (void)_this;
}
void Player_Wallet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Player_Wallet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Player_Wallet::Clear() {
// @@protoc_insertion_point(message_clear_start:tutorial.Player.Wallet)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Player_Wallet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .tutorial.Player.Item items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Player_Wallet::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tutorial.Player.Wallet)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tutorial.Player.Item items = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_items(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tutorial.Player.Wallet)
  return target;
}

size_t Player_Wallet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tutorial.Player.Wallet)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tutorial.Player.Item items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Player_Wallet::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Player_Wallet::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Player_Wallet::GetClassData() const { return &_class_data_; }

void Player_Wallet::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Player_Wallet *>(to)->MergeFrom(
      static_cast<const Player_Wallet &>(from));
}


void Player_Wallet::MergeFrom(const Player_Wallet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tutorial.Player.Wallet)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Player_Wallet::CopyFrom(const Player_Wallet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tutorial.Player.Wallet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Player_Wallet::IsInitialized() const {
  return true;
}

void Player_Wallet::InternalSwap(Player_Wallet* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  items_.InternalSwap(&other->items_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Player_Wallet::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tutorial_2eplayer_2eproto_getter, &descriptor_table_tutorial_2eplayer_2eproto_once,
      file_level_metadata_tutorial_2eplayer_2eproto[5]);
}

// ===================================================================

class Player_Bag::_Internal {
 public:
};

Player_Bag::Player_Bag(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  wallets_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tutorial.Player.Bag)
}
Player_Bag::Player_Bag(const Player_Bag& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      wallets_(from.wallets_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tutorial.Player.Bag)
}

inline void Player_Bag::SharedCtor() {
}

Player_Bag::~Player_Bag() {
  // @@protoc_insertion_point(destructor:tutorial.Player.Bag)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Player_Bag::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Player_Bag::ArenaDtor(void* object) {
  Player_Bag* _this = reinterpret_cast< Player_Bag* >(object);
  (void)_this;
}
void Player_Bag::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Player_Bag::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Player_Bag::Clear() {
// @@protoc_insertion_point(message_clear_start:tutorial.Player.Bag)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  wallets_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Player_Bag::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .tutorial.Player.Wallet wallets = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_wallets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Player_Bag::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tutorial.Player.Bag)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tutorial.Player.Wallet wallets = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_wallets_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_wallets(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tutorial.Player.Bag)
  return target;
}

size_t Player_Bag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tutorial.Player.Bag)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tutorial.Player.Wallet wallets = 1;
  total_size += 1UL * this->_internal_wallets_size();
  for (const auto& msg : this->wallets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Player_Bag::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Player_Bag::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Player_Bag::GetClassData() const { return &_class_data_; }

void Player_Bag::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Player_Bag *>(to)->MergeFrom(
      static_cast<const Player_Bag &>(from));
}


void Player_Bag::MergeFrom(const Player_Bag& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tutorial.Player.Bag)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  wallets_.MergeFrom(from.wallets_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Player_Bag::CopyFrom(const Player_Bag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tutorial.Player.Bag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Player_Bag::IsInitialized() const {
  return true;
}

void Player_Bag::InternalSwap(Player_Bag* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  wallets_.InternalSwap(&other->wallets_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Player_Bag::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tutorial_2eplayer_2eproto_getter, &descriptor_table_tutorial_2eplayer_2eproto_once,
      file_level_metadata_tutorial_2eplayer_2eproto[6]);
}

// ===================================================================

Player_Box_ItemsEntry_DoNotUse::Player_Box_ItemsEntry_DoNotUse() {}
Player_Box_ItemsEntry_DoNotUse::Player_Box_ItemsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Player_Box_ItemsEntry_DoNotUse::MergeFrom(const Player_Box_ItemsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Player_Box_ItemsEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tutorial_2eplayer_2eproto_getter, &descriptor_table_tutorial_2eplayer_2eproto_once,
      file_level_metadata_tutorial_2eplayer_2eproto[7]);
}

// ===================================================================

class Player_Box::_Internal {
 public:
};

Player_Box::Player_Box(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  items_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tutorial.Player.Box)
}
Player_Box::Player_Box(const Player_Box& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  items_.MergeFrom(from.items_);
  // @@protoc_insertion_point(copy_constructor:tutorial.Player.Box)
}

inline void Player_Box::SharedCtor() {
}

Player_Box::~Player_Box() {
  // @@protoc_insertion_point(destructor:tutorial.Player.Box)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Player_Box::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Player_Box::ArenaDtor(void* object) {
  Player_Box* _this = reinterpret_cast< Player_Box* >(object);
  (void)_this;
  _this->items_. ~MapField();
}
inline void Player_Box::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &Player_Box::ArenaDtor);
  }
}
void Player_Box::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Player_Box::Clear() {
// @@protoc_insertion_point(message_clear_start:tutorial.Player.Box)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Player_Box::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<uint64, .tutorial.Player.Item> items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&items_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Player_Box::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tutorial.Player.Box)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<uint64, .tutorial.Player.Item> items = 1;
  if (!this->_internal_items().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::tutorial::Player_Item >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< uint64_t, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_items().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_items().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::tutorial::Player_Item >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::tutorial::Player_Item >::const_iterator
          it = this->_internal_items().begin();
          it != this->_internal_items().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Player_Box_ItemsEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::tutorial::Player_Item >::const_iterator
          it = this->_internal_items().begin();
          it != this->_internal_items().end(); ++it) {
        target = Player_Box_ItemsEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tutorial.Player.Box)
  return target;
}

size_t Player_Box::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tutorial.Player.Box)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint64, .tutorial.Player.Item> items = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_items_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::tutorial::Player_Item >::const_iterator
      it = this->_internal_items().begin();
      it != this->_internal_items().end(); ++it) {
    total_size += Player_Box_ItemsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Player_Box::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Player_Box::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Player_Box::GetClassData() const { return &_class_data_; }

void Player_Box::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Player_Box *>(to)->MergeFrom(
      static_cast<const Player_Box &>(from));
}


void Player_Box::MergeFrom(const Player_Box& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tutorial.Player.Box)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Player_Box::CopyFrom(const Player_Box& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tutorial.Player.Box)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Player_Box::IsInitialized() const {
  return true;
}

void Player_Box::InternalSwap(Player_Box* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  items_.InternalSwap(&other->items_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Player_Box::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tutorial_2eplayer_2eproto_getter, &descriptor_table_tutorial_2eplayer_2eproto_once,
      file_level_metadata_tutorial_2eplayer_2eproto[8]);
}

// ===================================================================

Player_MyTrunk_BoxsEntry_DoNotUse::Player_MyTrunk_BoxsEntry_DoNotUse() {}
Player_MyTrunk_BoxsEntry_DoNotUse::Player_MyTrunk_BoxsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Player_MyTrunk_BoxsEntry_DoNotUse::MergeFrom(const Player_MyTrunk_BoxsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Player_MyTrunk_BoxsEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tutorial_2eplayer_2eproto_getter, &descriptor_table_tutorial_2eplayer_2eproto_once,
      file_level_metadata_tutorial_2eplayer_2eproto[9]);
}

// ===================================================================

class Player_MyTrunk::_Internal {
 public:
};

Player_MyTrunk::Player_MyTrunk(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  boxs_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tutorial.Player.MyTrunk)
}
Player_MyTrunk::Player_MyTrunk(const Player_MyTrunk& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  boxs_.MergeFrom(from.boxs_);
  // @@protoc_insertion_point(copy_constructor:tutorial.Player.MyTrunk)
}

inline void Player_MyTrunk::SharedCtor() {
}

Player_MyTrunk::~Player_MyTrunk() {
  // @@protoc_insertion_point(destructor:tutorial.Player.MyTrunk)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Player_MyTrunk::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Player_MyTrunk::ArenaDtor(void* object) {
  Player_MyTrunk* _this = reinterpret_cast< Player_MyTrunk* >(object);
  (void)_this;
  _this->boxs_. ~MapField();
}
inline void Player_MyTrunk::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &Player_MyTrunk::ArenaDtor);
  }
}
void Player_MyTrunk::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Player_MyTrunk::Clear() {
// @@protoc_insertion_point(message_clear_start:tutorial.Player.MyTrunk)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  boxs_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Player_MyTrunk::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<uint64, .tutorial.Player.Box> boxs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&boxs_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Player_MyTrunk::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tutorial.Player.MyTrunk)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<uint64, .tutorial.Player.Box> boxs = 1;
  if (!this->_internal_boxs().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::tutorial::Player_Box >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< uint64_t, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_boxs().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_boxs().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::tutorial::Player_Box >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::tutorial::Player_Box >::const_iterator
          it = this->_internal_boxs().begin();
          it != this->_internal_boxs().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Player_MyTrunk_BoxsEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::tutorial::Player_Box >::const_iterator
          it = this->_internal_boxs().begin();
          it != this->_internal_boxs().end(); ++it) {
        target = Player_MyTrunk_BoxsEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tutorial.Player.MyTrunk)
  return target;
}

size_t Player_MyTrunk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tutorial.Player.MyTrunk)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint64, .tutorial.Player.Box> boxs = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_boxs_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::tutorial::Player_Box >::const_iterator
      it = this->_internal_boxs().begin();
      it != this->_internal_boxs().end(); ++it) {
    total_size += Player_MyTrunk_BoxsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Player_MyTrunk::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Player_MyTrunk::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Player_MyTrunk::GetClassData() const { return &_class_data_; }

void Player_MyTrunk::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Player_MyTrunk *>(to)->MergeFrom(
      static_cast<const Player_MyTrunk &>(from));
}


void Player_MyTrunk::MergeFrom(const Player_MyTrunk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tutorial.Player.MyTrunk)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  boxs_.MergeFrom(from.boxs_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Player_MyTrunk::CopyFrom(const Player_MyTrunk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tutorial.Player.MyTrunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Player_MyTrunk::IsInitialized() const {
  return true;
}

void Player_MyTrunk::InternalSwap(Player_MyTrunk* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  boxs_.InternalSwap(&other->boxs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Player_MyTrunk::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tutorial_2eplayer_2eproto_getter, &descriptor_table_tutorial_2eplayer_2eproto_once,
      file_level_metadata_tutorial_2eplayer_2eproto[10]);
}

// ===================================================================

Player_MyTrunksEntry_DoNotUse::Player_MyTrunksEntry_DoNotUse() {}
Player_MyTrunksEntry_DoNotUse::Player_MyTrunksEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Player_MyTrunksEntry_DoNotUse::MergeFrom(const Player_MyTrunksEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Player_MyTrunksEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tutorial_2eplayer_2eproto_getter, &descriptor_table_tutorial_2eplayer_2eproto_once,
      file_level_metadata_tutorial_2eplayer_2eproto[11]);
}

// ===================================================================

class Player::_Internal {
 public:
  static const ::tutorial::Player_MobilePhone& mobilephone(const Player* msg);
  static const ::tutorial::Player_Watch& watch(const Player* msg);
};

const ::tutorial::Player_MobilePhone&
Player::_Internal::mobilephone(const Player* msg) {
  return *msg->msg_.mobilephone_;
}
const ::tutorial::Player_Watch&
Player::_Internal::watch(const Player* msg) {
  return *msg->msg_.watch_;
}
void Player::set_allocated_mobilephone(::tutorial::Player_MobilePhone* mobilephone) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_msg();
  if (mobilephone) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::tutorial::Player_MobilePhone>::GetOwningArena(mobilephone);
    if (message_arena != submessage_arena) {
      mobilephone = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mobilephone, submessage_arena);
    }
    set_has_mobilephone();
    msg_.mobilephone_ = mobilephone;
  }
  // @@protoc_insertion_point(field_set_allocated:tutorial.Player.mobilePhone)
}
void Player::set_allocated_watch(::tutorial::Player_Watch* watch) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_msg();
  if (watch) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::tutorial::Player_Watch>::GetOwningArena(watch);
    if (message_arena != submessage_arena) {
      watch = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, watch, submessage_arena);
    }
    set_has_watch();
    msg_.watch_ = watch;
  }
  // @@protoc_insertion_point(field_set_allocated:tutorial.Player.watch)
}
Player::Player(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  phones_(arena),
  items_(arena),
  bags_(arena),
  mytrunks_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tutorial.Player)
}
Player::Player(const Player& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      phones_(from.phones_),
      bags_(from.bags_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  items_.MergeFrom(from.items_);
  mytrunks_.MergeFrom(from.mytrunks_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_email().empty()) {
    email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_email(), 
      GetArenaForAllocation());
  }
  id_ = from.id_;
  clear_has_msg();
  switch (from.msg_case()) {
    case kMobilePhone: {
      _internal_mutable_mobilephone()->::tutorial::Player_MobilePhone::MergeFrom(from._internal_mobilephone());
      break;
    }
    case kWatch: {
      _internal_mutable_watch()->::tutorial::Player_Watch::MergeFrom(from._internal_watch());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tutorial.Player)
}

inline void Player::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
id_ = uint64_t{0u};
clear_has_msg();
}

Player::~Player() {
  // @@protoc_insertion_point(destructor:tutorial.Player)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Player::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  email_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_msg()) {
    clear_msg();
  }
}

void Player::ArenaDtor(void* object) {
  Player* _this = reinterpret_cast< Player* >(object);
  (void)_this;
  _this->items_. ~MapField();
  _this->mytrunks_. ~MapField();
}
inline void Player::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &Player::ArenaDtor);
  }
}
void Player::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Player::clear_msg() {
// @@protoc_insertion_point(one_of_clear_start:tutorial.Player)
  switch (msg_case()) {
    case kMobilePhone: {
      if (GetArenaForAllocation() == nullptr) {
        delete msg_.mobilephone_;
      }
      break;
    }
    case kWatch: {
      if (GetArenaForAllocation() == nullptr) {
        delete msg_.watch_;
      }
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MSG_NOT_SET;
}


void Player::Clear() {
// @@protoc_insertion_point(message_clear_start:tutorial.Player)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  phones_.Clear();
  items_.Clear();
  bags_.Clear();
  mytrunks_.Clear();
  name_.ClearToEmpty();
  email_.ClearToEmpty();
  id_ = uint64_t{0u};
  clear_msg();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Player::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tutorial.Player.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string email = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_email();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tutorial.Player.email"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .tutorial.Player.PhoneNumber phones = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_phones(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<uint64, .tutorial.Player.Item> items = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&items_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .tutorial.Player.MobilePhone mobilePhone = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_mobilephone(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tutorial.Player.Watch watch = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_watch(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .tutorial.Player.Bag bags = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bags(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<uint64, .tutorial.Player.MyTrunk> myTrunks = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&mytrunks_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Player::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tutorial.Player)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tutorial.Player.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string email = 3;
  if (!this->_internal_email().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_email().data(), static_cast<int>(this->_internal_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tutorial.Player.email");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_email(), target);
  }

  // repeated .tutorial.Player.PhoneNumber phones = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_phones_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_phones(i), target, stream);
  }

  // map<uint64, .tutorial.Player.Item> items = 5;
  if (!this->_internal_items().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::tutorial::Player_Item >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< uint64_t, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_items().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_items().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::tutorial::Player_Item >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::tutorial::Player_Item >::const_iterator
          it = this->_internal_items().begin();
          it != this->_internal_items().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Player_ItemsEntry_DoNotUse::Funcs::InternalSerialize(5, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::tutorial::Player_Item >::const_iterator
          it = this->_internal_items().begin();
          it != this->_internal_items().end(); ++it) {
        target = Player_ItemsEntry_DoNotUse::Funcs::InternalSerialize(5, it->first, it->second, target, stream);
      }
    }
  }

  // .tutorial.Player.MobilePhone mobilePhone = 6;
  if (_internal_has_mobilephone()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::mobilephone(this), target, stream);
  }

  // .tutorial.Player.Watch watch = 7;
  if (_internal_has_watch()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::watch(this), target, stream);
  }

  // repeated .tutorial.Player.Bag bags = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_bags_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_bags(i), target, stream);
  }

  // map<uint64, .tutorial.Player.MyTrunk> myTrunks = 9;
  if (!this->_internal_mytrunks().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::tutorial::Player_MyTrunk >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< uint64_t, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_mytrunks().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_mytrunks().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::tutorial::Player_MyTrunk >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::tutorial::Player_MyTrunk >::const_iterator
          it = this->_internal_mytrunks().begin();
          it != this->_internal_mytrunks().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Player_MyTrunksEntry_DoNotUse::Funcs::InternalSerialize(9, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::tutorial::Player_MyTrunk >::const_iterator
          it = this->_internal_mytrunks().begin();
          it != this->_internal_mytrunks().end(); ++it) {
        target = Player_MyTrunksEntry_DoNotUse::Funcs::InternalSerialize(9, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tutorial.Player)
  return target;
}

size_t Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tutorial.Player)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tutorial.Player.PhoneNumber phones = 4;
  total_size += 1UL * this->_internal_phones_size();
  for (const auto& msg : this->phones_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<uint64, .tutorial.Player.Item> items = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_items_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::tutorial::Player_Item >::const_iterator
      it = this->_internal_items().begin();
      it != this->_internal_items().end(); ++it) {
    total_size += Player_ItemsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .tutorial.Player.Bag bags = 8;
  total_size += 1UL * this->_internal_bags_size();
  for (const auto& msg : this->bags_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<uint64, .tutorial.Player.MyTrunk> myTrunks = 9;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_mytrunks_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::tutorial::Player_MyTrunk >::const_iterator
      it = this->_internal_mytrunks().begin();
      it != this->_internal_mytrunks().end(); ++it) {
    total_size += Player_MyTrunksEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string email = 3;
  if (!this->_internal_email().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_email());
  }

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_id());
  }

  switch (msg_case()) {
    // .tutorial.Player.MobilePhone mobilePhone = 6;
    case kMobilePhone: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.mobilephone_);
      break;
    }
    // .tutorial.Player.Watch watch = 7;
    case kWatch: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.watch_);
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Player::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Player::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Player::GetClassData() const { return &_class_data_; }

void Player::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Player *>(to)->MergeFrom(
      static_cast<const Player &>(from));
}


void Player::MergeFrom(const Player& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tutorial.Player)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  phones_.MergeFrom(from.phones_);
  items_.MergeFrom(from.items_);
  bags_.MergeFrom(from.bags_);
  mytrunks_.MergeFrom(from.mytrunks_);
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_email().empty()) {
    _internal_set_email(from._internal_email());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  switch (from.msg_case()) {
    case kMobilePhone: {
      _internal_mutable_mobilephone()->::tutorial::Player_MobilePhone::MergeFrom(from._internal_mobilephone());
      break;
    }
    case kWatch: {
      _internal_mutable_watch()->::tutorial::Player_Watch::MergeFrom(from._internal_watch());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Player::CopyFrom(const Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tutorial.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Player::IsInitialized() const {
  return true;
}

void Player::InternalSwap(Player* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  phones_.InternalSwap(&other->phones_);
  items_.InternalSwap(&other->items_);
  bags_.InternalSwap(&other->bags_);
  mytrunks_.InternalSwap(&other->mytrunks_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &email_, lhs_arena,
      &other->email_, rhs_arena
  );
  swap(id_, other->id_);
  swap(msg_, other->msg_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Player::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tutorial_2eplayer_2eproto_getter, &descriptor_table_tutorial_2eplayer_2eproto_once,
      file_level_metadata_tutorial_2eplayer_2eproto[12]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace tutorial
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tutorial::Player_PhoneNumber* Arena::CreateMaybeMessage< ::tutorial::Player_PhoneNumber >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tutorial::Player_PhoneNumber >(arena);
}
template<> PROTOBUF_NOINLINE ::tutorial::Player_Item* Arena::CreateMaybeMessage< ::tutorial::Player_Item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tutorial::Player_Item >(arena);
}
template<> PROTOBUF_NOINLINE ::tutorial::Player_ItemsEntry_DoNotUse* Arena::CreateMaybeMessage< ::tutorial::Player_ItemsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tutorial::Player_ItemsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::tutorial::Player_MobilePhone* Arena::CreateMaybeMessage< ::tutorial::Player_MobilePhone >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tutorial::Player_MobilePhone >(arena);
}
template<> PROTOBUF_NOINLINE ::tutorial::Player_Watch* Arena::CreateMaybeMessage< ::tutorial::Player_Watch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tutorial::Player_Watch >(arena);
}
template<> PROTOBUF_NOINLINE ::tutorial::Player_Wallet* Arena::CreateMaybeMessage< ::tutorial::Player_Wallet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tutorial::Player_Wallet >(arena);
}
template<> PROTOBUF_NOINLINE ::tutorial::Player_Bag* Arena::CreateMaybeMessage< ::tutorial::Player_Bag >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tutorial::Player_Bag >(arena);
}
template<> PROTOBUF_NOINLINE ::tutorial::Player_Box_ItemsEntry_DoNotUse* Arena::CreateMaybeMessage< ::tutorial::Player_Box_ItemsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tutorial::Player_Box_ItemsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::tutorial::Player_Box* Arena::CreateMaybeMessage< ::tutorial::Player_Box >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tutorial::Player_Box >(arena);
}
template<> PROTOBUF_NOINLINE ::tutorial::Player_MyTrunk_BoxsEntry_DoNotUse* Arena::CreateMaybeMessage< ::tutorial::Player_MyTrunk_BoxsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tutorial::Player_MyTrunk_BoxsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::tutorial::Player_MyTrunk* Arena::CreateMaybeMessage< ::tutorial::Player_MyTrunk >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tutorial::Player_MyTrunk >(arena);
}
template<> PROTOBUF_NOINLINE ::tutorial::Player_MyTrunksEntry_DoNotUse* Arena::CreateMaybeMessage< ::tutorial::Player_MyTrunksEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tutorial::Player_MyTrunksEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::tutorial::Player* Arena::CreateMaybeMessage< ::tutorial::Player >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tutorial::Player >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
