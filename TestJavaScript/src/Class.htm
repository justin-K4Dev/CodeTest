<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8"/>
    </head>
    <body>
        <script>
            // Class
            // ECMAScript 6 부터 제공

            // Class 정의
            // Class 는 사실 함수이다.
            // 함수를 함수 표현식과 함수 선언으로 정의할 수 있듯이
            // class 문법도 class 표현식과 class 선언 두가지 방법을 제공한다.
            class Polygon {
                constructor(height, width) {
                    this.height = height;
                    this.width = width;
                }
            }

            // Hoisting
            // 함수 선언 과 클래스 선언의 중요한 차이점은 함수 선언의 경우 호이스팅이 일어나지만
            // 클래스 선언은 그렇지 않다는 것이다.
            // 클래스를 사용하기 위해서는 클래스를 먼저 선언 해야 하며
            // 그렇지 않으면 다음과 같은 코드는 ReferenceError 를 던질 것이다:
            var p = new Shape(); // ReferenceError

            class Shape {}


            // Class 표현식
            // class 표현식은 class를 정의 하는 또 다른 방법이다.
            // Class 표현식은 이름을 가질 수도 있고 안가질 수도 있다.
            // 이름을 가진 class 표현식의 클래스 이름은
            // 해당 클래스의 body 에 대해 local scope 에 한해 유효하다.

            // unnamed
            var Rectangle = class {
                constructor(height, width) {
                    this.height = height;
                    this.width = width;
                }
            };

            // named
            var Box = class Box {
                constructor(height, width) {
                    this.height = height;
                    this.width = width;
                }
            };


            // Class body 와 method 정의
            // class body는 중괄호 {} 로 묶여 있는 안쪽 부분이다.
            // 이곳은 여러분이 method 나 constructor 와 같은 class members 를 정의할 곳이다.

            // Strict mode - 엄격한 로직 체크 모드
            // 클래스 선언과 클래스 표현식의 본문(body)은 strict mode 에서 실행 된다.

            // Constructor
            // constructor 메소드는 class 로 생성된 객체를 생성하고 초기화 하기 위한 특수한 메소드 이다.
            // "constructor" 라는 이름을 가진 특수한 메소드는 클래스 안에 한 개만 존재할 수 있다.
            // 만약 클래스가 한 개를 초과하는 constructor 메소드를 포함하면 SyntaxError 가 발생한다.
            // constructor 는 부모 클래스의 constructor 를 호출하기 위해 super 키워드를 사용할 수 있다.

            // Prototype methods
            class Space {
                constructor(height, width) {
                    this.height = height;
                    this.width = width;
                }

                get area() {
                    return this.calcArea()
                }

                calcArea() {
                    return this.height * this.width;
                }
            }

            // Static methods
            // static 키워드는 클래스의 정적(static) 메소드를 정의한다.
            // 정적 메소드는 클래스의 인스턴스화(instantiating) 없이 불리며, 클래스가 인스턴스화 되었다면 부를 수 없다.
            // 정적 메소드는 어플리케이션(application)을 위한 유틸리티(utility) 함수를 생성하는데 주로 사용된다.
            class Point {
                constructor(x, y) {
                    this.x = x;
                    this.y = y;
                }

                static distance(a, b) {
                    const dx = a.x - b.x;
                    const dy = a.y - b.y;

                    return Math.sqrt(dx*dx + dy*dy);
                }
            }

            const p1 = new Point(5, 5);
            const p2 = new Point(10, 10);
            console.log(Point.distance(p1, p2));


            // extends 를 통한 클래스 상속(sub classing)
            // extends 키워드는 클래스 선언 이나 클래스 표현식에서 다른 클래스의 자식 클래스를 생성하기 위해 사용 된다.
            // Sub classing built-in objects
            class Animal {
                constructor(name) {
                    this.name = name;
                }

                speak() {
                    console.log(this.name + ' makes a noise.');
                }
            }

            class Dog extends Animal {
                speak() {
                    console.log(this.name + ' barks.');
                }
            }

            // super 를 통한 상위 클래스 호출
            // super 키워드는 객체의 부모가 가지고 있는 함수들을 호출하기 위해 사용 된다.
            class Cat {
                constructor(name) {
                    this.name = name;
                }

                speak() {
                    console.log(this.name + ' makes a noise.');
                }
            }

            class Lion extends Cat {
                speak() {
                    super.speak();
                    console.log(this.name + ' roars.');
                }
            }

        </script>
    </body>
</html>
